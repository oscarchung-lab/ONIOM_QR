          ============================================================
          |                                                          |
          |            Crystallography & NMR System (CNS)            |
          |                         CNSsolve                         |
          |                                                          |
          ============================================================
           Version: 1.3
           Status: General release
          ============================================================
           Written by: A.T.Brunger, P.D.Adams, G.M.Clore, W.L.DeLano,
                       P.Gros, R.W.Grosse-Kunstleve,J.-S.Jiang,J.M.Krahn,
                       J.Kuszewski, M.Nilges, N.S.Pannu, R.J.Read,
                       L.M.Rice, G.F.Schroeder, T.Simonson, G.L.Warren.
           Copyright (c) 1997-2010 Yale University
          ============================================================
           Running on machine: x86_64-conda-linux-gnu (x86_64/Linux,64-bit)
           Program started by: yanzy
           Program started at: 23:43:56 on 24-Dec-2023
          ============================================================

 FFT3C: Using FFTPACK4.1

 CNSsolve>{DF-GAUCNS This is minimize.inp - 2018-12-21} 
 CNSsolve>{+ directory: xtal_refine +} 
 CNSsolve>{+ description: Crystallographic conjugate gradient minimization refinement +} 
 CNSsolve>{+ authors: Axel T. Brunger, and Paul D. Adams +} 
 CNSsolve>{+ copyright: Yale University +} 
 CNSsolve> 
 CNSsolve>{+ reference: A.T. Brunger, The Free R Value: a Novel Statistical 
 CNSsolve>              Quantity for Assessing the Accuracy of Crystal Structures, 
 CNSsolve>              Nature 355, 472-474 (1992) +} 
 CNSsolve>{+ reference: N.S. Pannu and R.J. Read, Improved structure refinement 
 CNSsolve>              through maximum likelihood, Acta Cryst. A52, 659-668 (1996) +} 
 CNSsolve>{+ reference: P.D. Adams, N.S. Pannu, R.J. Read and A.T. Brunger, 
 CNSsolve>              Cross-validated Maximum Likelihood Enhances Crystallographic 
 CNSsolve>              Simulated Annealing Refinement, Proc. Natl. Acad. Sci. USA 
 CNSsolve>              94, 5018-5023 (1997) +} 
 CNSsolve> 
 CNSsolve>{- Guidelines for using this file: 
 CNSsolve>   - all strings must be quoted by double-quotes 
 CNSsolve>   - logical variables (true/false) are not quoted 
 CNSsolve>   - do not remove any evaluate statements from the file 
 CNSsolve>   - the selections store1 through store8 are available for general use -} 
 CNSsolve> 
 CNSsolve>{- begin block parameter definition -} define( 
 DEFINE> 
 DEFINE>{============================ coordinates ============================} 
 DEFINE> 
 DEFINE>{* coordinate file *} 
 DEFINE>{===>} coordinate_infile="mm3.pdb"; 
 DEFINE> 
 DEFINE>{==================== molecular information ==========================} 
 DEFINE> 
 DEFINE>{* topology files *} 
 DEFINE>{===>} topology_infile_1="CNS_TOPPAR:protein.top"; 
 DEFINE>{===>} topology_infile_2="CNS_TOPPAR:dna-rna.top"; 
 DEFINE>{===>} topology_infile_3="CNS_TOPPAR:water.top"; 
 DEFINE>{===>} topology_infile_4="CNS_TOPPAR:ion.top"; 
 DEFINE>{===>} topology_infile_5="CNS_TOPPAR:carbohydrate.top"; 
 DEFINE>{===>} topology_infile_6="CIA.top"; 
 DEFINE>{===>} topology_infile_7=""; 
 DEFINE>{===>} topology_infile_8=""; 
 DEFINE> 
 DEFINE>{* linkage files for linear, continuous polymers (protein, DNA, RNA) *} 
 DEFINE>{===>} link_infile_1="CNS_TOPPAR:protein.link"; 
 DEFINE>{===>} link_infile_2="CNS_TOPPAR:dna-rna-pho.link"; 
 DEFINE>{===>} link_infile_3=""; 
 DEFINE> 
 DEFINE>{* parameter files *} 
 DEFINE>{===>} parameter_infile_1="CNS_TOPPAR:protein_rep.param"; 
 DEFINE>{===>} parameter_infile_2="CNS_TOPPAR:dna-rna_rep.param"; 
 DEFINE>{===>} parameter_infile_3="CNS_TOPPAR:water_rep.param"; 
 DEFINE>{===>} parameter_infile_4="CNS_TOPPAR:ion.param"; 
 DEFINE>{===>} parameter_infile_5="CNS_TOPPAR:carbohydrate.param"; 
 DEFINE>{===>} parameter_infile_6="CIA.par"; 
 DEFINE>{===>} parameter_infile_7=""; 
 DEFINE>{===>} parameter_infile_8=""; 
 DEFINE> 
 DEFINE>{* molecular topology file: optional (leave blank for auto generation) *} 
 DEFINE>{* 
 DEFINE>   Auto generation of the molecular topology from the coordinates should only 
 DEFINE>   be used if: 
 DEFINE>   (1) Each distinct protein, DNA, or RNA chain must have a separate segid 
 DEFINE>       (or chainid if the chainid is non-blank). 
 DEFINE>   (2) Each contiguous protein, RNA, or RNA chain must not be disrupted by 
 DEFINE>       other types of residues or ligands.  Rather, these other residues 
 DEFINE>       should be listed after protein, RNA/DNA chains. 
 DEFINE>   (3) Disulphides are automatically detected based on distances between the sulfur atoms 
 DEFINE>      (must be less than 3 A apart). 
 DEFINE>   (4) Broken protein/RNA/DNA chains without terminii must be more than 2.5 A apart to be recognized as such. 
 DEFINE>   (5) N-linked glycan links are automatically recognized if the bonded atoms are less than 2.5 A apart. 
 DEFINE>   (6) Automatic generation cannot be used with alternate conformations. 
 DEFINE>   For ligands, the user must make suitable topology and parameter files. 
 DEFINE>   For non-standard covalent linkages, the custom patch file should be used. 
 DEFINE>   Alternatively, the generate.inp or generate_easy.inp task files 
 DEFINE>   can be used to generated the mtf prior to running this task file. 
 DEFINE>    *} 
 DEFINE>{===>} structure_infile="mm3.mtf"; 
 DEFINE> 
 DEFINE>{* for auto generation: extra linkages and modifications by custom patches *} 
 DEFINE>{===>} patch_infile=""; 
 DEFINE> 
 DEFINE>{* force field settings file *} 
 DEFINE>{===>} force_field_infile=""; 
 DEFINE> 
 DEFINE>{====================== crystallographic data ========================} 
 DEFINE> 
 DEFINE>{* space group *} 
 DEFINE>{* use International Table conventions with subscripts substituted 
 DEFINE>   by parenthesis *} 
 DEFINE>{===>} sg="C2"; 
 DEFINE> 
 DEFINE>{* unit cell parameters in Angstroms and degrees *} 
 DEFINE>{+ table: rows=1 "cell" cols=6 "a" "b" "c" "alpha" "beta" "gamma" +} 
 DEFINE>{===>} a=56.102; 
 DEFINE>{===>} b=76.397; 
 DEFINE>{===>} c=80.699; 
 DEFINE>{===>} alpha=90.00; 
 DEFINE>{===>} beta=103.18; 
 DEFINE>{===>} gamma=90.00; 
 DEFINE> 
 DEFINE>{* anomalous f' f'' library file *} 
 DEFINE>{* If a file is not specified, no anomalous contribution will be included *} 
 DEFINE>{+ choice: "CNS_XRAYLIB:anom_cu.lib" "CNS_XRAYLIB:anom_mo.lib" "" user_file +} 
 DEFINE>{===>} anom_library=""; 
 DEFINE> 
 DEFINE>{* reflection files *} 
 DEFINE>{* specify non-anomalous reflection files before anomalous reflection files. *} 
 DEFINE>{* files must contain unique array names otherwise errors will occur *} 
 DEFINE>{===>} reflection_infile_1="1xoz-sf.cv"; 
 DEFINE>{===>} reflection_infile_2=""; 
 DEFINE>{===>} reflection_infile_3=""; 
 DEFINE>{===>} reflection_infile_4=""; 
 DEFINE> 
 DEFINE>{* reciprocal space array containing observed amplitudes: required *} 
 DEFINE>{===>} obs_f="fobs"; 
 DEFINE> 
 DEFINE>{* reciprocal space array containing sigma values for amplitudes: required *} 
 DEFINE>{===>} obs_sigf="sigma"; 
 DEFINE> 
 DEFINE>{* reciprocal space array containing test set for cross-validation: required *} 
 DEFINE>{* cross-validation should always be used, with the possible exception 
 DEFINE>   of a final round of refinement including all data *} 
 DEFINE>{* cross-validation is always required for the maximum likelihood targets *} 
 DEFINE>{===>} test_set="test"; 
 DEFINE> 
 DEFINE>{* number for selection of test reflections: required for cross-validation *} 
 DEFINE>{* ie. reflections with the test set array equal to this number will be 
 DEFINE>       used for cross-validation, all other reflections form the working set *} 
 DEFINE>{===>} test_flag=1; 
 DEFINE> 
 DEFINE>{* reciprocal space array containing weighting scheme for observed 
 DEFINE>   amplitudes: optional *} 
 DEFINE>{* only used for the "residual" and "vector" targets - this will 
 DEFINE>   default to a constant value of 1 if array is not present *} 
 DEFINE>{===>} obs_w=""; 
 DEFINE> 
 DEFINE>{* reciprocal space array containing observed intensities: optional *} 
 DEFINE>{* required for the "mli" target *} 
 DEFINE>{===>} obs_i=""; 
 DEFINE> 
 DEFINE>{* reciprocal space array containing sigma values for intensities: optional *} 
 DEFINE>{* required for the "mli" target *} 
 DEFINE>{===>} obs_sigi=""; 
 DEFINE> 
 DEFINE>{* reciprocal space arrays with experimental phase probability 
 DEFINE>   distribution: optional *} 
 DEFINE>{* Hendrickson-Lattman coefficients A,B,C,D *} 
 DEFINE>{* required for the "mlhl" target *} 
 DEFINE>{+ table: rows=1 "HL coefficients" cols=4 "A" "B" "C" "D" +} 
 DEFINE>{===>} obs_pa=""; 
 DEFINE>{===>} obs_pb=""; 
 DEFINE>{===>} obs_pc=""; 
 DEFINE>{===>} obs_pd=""; 
 DEFINE> 
 DEFINE>{* complex reciprocal space array containing experimental phases: optional *} 
 DEFINE>{* required for the "mixed" and "vector" targets *} 
 DEFINE>{===>} obs_phase=""; 
 DEFINE> 
 DEFINE>{* reciprocal space array containing experimental figures of merit: optional *} 
 DEFINE>{* required for the "mixed" target *} 
 DEFINE>{===>} obs_fom=""; 
 DEFINE> 
 DEFINE>{* resolution limits to be used in refinement *} 
 DEFINE>{* the full resolution range of observed data should be used in refinement. 
 DEFINE>   A bulk solvent correction should be applied to allow the use of low 
 DEFINE>   resolution terms. If no bulk solvent correction is applied, data must 
 DEFINE>   be truncated at a lower resolution limit of between 8 and 6 Angstrom. *} 
 DEFINE>{+ table: rows=1 "resolution" cols=2 "lowest" "highest" +} 
 DEFINE>{===>} low_res=79.06; 
 DEFINE>{===>} high_res=1.37; 
 DEFINE> 
 DEFINE>{* apply rejection criteria to amplitudes or intensities *} 
 DEFINE>{+ choice: "amplitude" "intensity" +} 
 DEFINE>{===>} obs_type="amplitude"; 
 DEFINE> 
 DEFINE>{* Observed data cutoff criteria: applied to amplitudes or intensities *} 
 DEFINE>{* reflections with magnitude(Obs)/sigma < cutoff are rejected. *} 
 DEFINE>{===>} sigma_cut=0.0; 
 DEFINE> 
 DEFINE>{* rms outlier cutoff: applied to amplitudes or intensities *} 
 DEFINE>{* reflections with magnitude(Obs) > cutoff*rms(Obs) will be rejected *} 
 DEFINE>{===>} obs_rms=10000; 
 DEFINE> 
 DEFINE>{=================== non-crystallographic symmetry ===================} 
 DEFINE> 
 DEFINE>{* NCS-restraints/constraints file *} 
 DEFINE>{* see auxiliary/ncs.def *} 
 DEFINE>{===>} ncs_infile=""; 
 DEFINE> 
 DEFINE>{============ overall B-factor and bulk solvent corrections ==========} 
 DEFINE> 
 DEFINE>{* overall B-factor correction *} 
 DEFINE>{+ choice: "no" "isotropic" "anisotropic" +} 
 DEFINE>{===>} bscale="isotropic"; 
 DEFINE> 
 DEFINE>{* bulk solvent correction *} 
 DEFINE>{* a mask is required around the molecule(s). The region 
 DEFINE>   outside this mask is the solvent region *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} bulk_sol=true; 
 DEFINE> 
 DEFINE>{* bulk solvent mask file *} 
 DEFINE>{* mask will be read from O type mask file if a name is given 
 DEFINE>   otherwise calculated from coordinates of selected atoms *} 
 DEFINE>{===>} bulk_mask_infile=""; 
 DEFINE> 
 DEFINE>{* automatic bulk solvent parameter optimization for e-density level sol_k (e/A^3) and B-factor sol_b (A^2) *} 
 DEFINE>{+ choice: true false +} 
 DEFINE>{===>} sol_auto=true; 
 DEFINE> 
 DEFINE>{* fixed solvent parameters (used if the automatic option is turned off) *} 
 DEFINE>{+ table: rows=1 "bulk solvent" cols=2 "e-density level sol_k (e/A^3)" "B-factor sol_b (A^2) " +} 
 DEFINE>{===>} sol_k=0.3; 
 DEFINE>{===>} sol_b=50.0; 
 DEFINE> 
 DEFINE>{* optional file with a listing of the results of the automatic bulk solvent optimization *} 
 DEFINE>{===>} sol_output=""; 
 DEFINE> 
 DEFINE>{* solvent mask parameters *} 
 DEFINE>{+ table: rows=1 "bulk solvent" cols=2 "probe radius (A) (usually set to 1)" "shrink radius (A) (usually set to 1)" +} 
 DEFINE>{===>} sol_rad=1.0; 
 DEFINE>{===>} sol_shrink=1.0; 
 DEFINE> 
 DEFINE>{========================== atom selection ===========================} 
 DEFINE> 
 DEFINE>{* select atoms to be included in refinement *} 
 DEFINE>{* this should include all conformations if multiple conformations are used *} 
 DEFINE>{===>} atom_select=(known and not hydrogen); 
 DEFINE> 
 DEFINE>{* select fixed atoms *} 
 DEFINE>{* note: atoms at special positions are automatically fixed. So, 
 DEFINE>   you don't have to explicitly fix them here. *} 
 DEFINE>{===>} atom_fixed=(none); 
 DEFINE> 
 DEFINE>{* select atoms to be harmonically restrained during refinement *} 
 DEFINE>{===>} atom_harm=(none); 
 DEFINE> 
 DEFINE>{* harmonic restraint constant - for harmonically restrained atoms *} 
 DEFINE>{===>} k_harmonic=10; 
 DEFINE> 
 DEFINE>{* select atoms in alternate conformation 1 *} 
 DEFINE>{===>} conf_1=(none); 
 DEFINE> 
 DEFINE>{* select atoms in alternate conformation 2 *} 
 DEFINE>{===>} conf_2=(none); 
 DEFINE> 
 DEFINE>{* select atoms in alternate conformation 3 *} 
 DEFINE>{===>} conf_3=(none); 
 DEFINE> 
 DEFINE>{* select atoms in alternate conformation 4 *} 
 DEFINE>{===>} conf_4=(none); 
 DEFINE> 
 DEFINE>{* additional restraints file *} 
 DEFINE>{* eg. auxiliary/dna-rna_restraints.def *} 
 DEFINE>{===>} restraints_infile=""; 
 DEFINE> 
 DEFINE>{===================== minimization parameters =======================} 
 DEFINE> 
 DEFINE>{* number of minimization steps *} 
 DEFINE>{===>} minimize_nstep=0; 
 DEFINE> 
 DEFINE>{* number of cycles *} 
 DEFINE>{===>} num_cycles=1; 
 DEFINE> 
 DEFINE>{* refinement target *} 
 DEFINE>{+ list: mlf: maximum likelihood target using amplitudes 
 DEFINE>         mli: maximum likelihood target using intensities 
 DEFINE>        mlhl: maximum likelihood target using amplitudes 
 DEFINE>              and phase probability distribution 
 DEFINE>    residual: standard crystallographic residual 
 DEFINE>      vector: vector residual 
 DEFINE>       mixed: (1-fom)*residual + fom*vector 
 DEFINE>        e2e2: correlation coefficient using normalized E^2 
 DEFINE>        e1e1: correlation coefficient using normalized E 
 DEFINE>        f2f2: correlation coefficient using F^2 
 DEFINE>        f1f1: correlation coefficient using F +} 
 DEFINE>{+ choice: "mlf" "mli" "mlhl" "residual" "vector" "mixed" 
 DEFINE>           "e2e2" "e1e1" "f2f2" "f1f1" +} 
 DEFINE>{===>} reftarget="mlf"; 
 DEFINE> 
 DEFINE>{* Wa weight for X-ray term *} 
 DEFINE>{* this will be determined automatically if a negative value is given. 
 DEFINE>   Note: wa can be very different depending on the target - if it is not 
 DEFINE>         determined automatically make sure an appropriate value is used *} 
 DEFINE>{===>} wa=0.33074; 
 DEFINE> 
 DEFINE>{* number of bins for refinement target *} 
 DEFINE>{* this will be determined automatically if a negative value is given 
 DEFINE>   otherwise the specified number of bins will be used *} 
 DEFINE>{===>} target_bins=-1; 
 DEFINE> 
 DEFINE>{* memory allocation for FFT calculation *} 
 DEFINE>{* this will be determined automatically if a negative value is given 
 DEFINE>   otherwise the specified number of words will be allocated *} 
 DEFINE>{===>} fft_memory=-1; 
 DEFINE> 
 DEFINE>{=========================== output files ============================} 
 DEFINE> 
 DEFINE>{* output coordinate file *} 
 DEFINE>{===>} coordinate_outfile="minimize.pdb"; 
 DEFINE> 
 DEFINE>{===========================================================================} 
 DEFINE>{        things below this line do not normally need to be changed          } 
 DEFINE>{===========================================================================} 
 DEFINE> 
 DEFINE> ) {- end block parameter definition -} 
 CNSsolve> 
 CNSsolve> checkversion 1.3 
 Program version= 1.3 File version= 1.3
 CNSsolve> 
 CNSsolve> evaluate ($log_level=quiet) 
 Assuming literal string "QUIET"
 EVALUATE: symbol $LOG_LEVEL set to "QUIET" (string)
 CNSsolve> 
 CNSsolve> if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   set message=normal echo=on end 
 CNSsolve> else 
 CNSsolve>   set message=off echo=off end 
 REMARKS FILENAME="mm3.mtf"
 REMARKS DATE:19-Dec-2023  10:22:23       created by user: yanz
 REMARKS VERSION:1.3
 %PARRDR-info: duplication of nonbonded entry C3  
 %PARRDR-info: duplication of nonbonded entry C2  
 %PARRDR-info: duplication of nonbonded entry H2  
 CNSsolve> 
 CNSsolve> xray 
 XRAY> 
 XRAY>   @CNS_XTALLIB:spacegroup.lib (sg=&sg; 
 ASSFIL: file spacegroup.lib opened.
 XRAY>! file  libraries/xtal/spacegroup.lib 
 XRAY>! library of symmetry operators for CNS 
 XRAY>! Automatically generated with SgInfo Version 2.00a13 
 XRAY> 
 XRAY>module 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &sg=$sg; 
 MODULE-DECLARATION>  &sgparam=$sgparam; 
 MODULE-DECLARATION>) 
 &_2_SG set to &_1_SG 
 MODULE-INVOCATION>                                sgparam=$sgparam;) 
 &_2_SGPARAM set to $_1_SGPARAM 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>set echo=off message=off end 
SYMMETRY: found symmetry operators for space group "C2" in library
 XRAY> 
 XRAY> 
 XRAY>   a=&a b=&b c=&c  alpha=&alpha beta=&beta gamma=&gamma 
 XRAY> 
 XRAY>   @CNS_XRAYLIB:scatter.lib 
 ASSFIL: file scatter.lib opened.
 XRAY>! file libraries/xray/scatter.lib 
 XRAY>! Atomic scattering factors without anomalous contribution 
 XRAY>! Library for CNS 
 XRAY> 
 XRAY>! Authors: Paul Adams, Joe Jaeger, and Axel T. Brunger 
 XRAY> 
 XRAY>!BEWARE: 
 XRAY>!(1) element Cf (Californium) has to be referred to as Cff 
 XRAY>!(2) element Sm (Samarium) has to be referred to as Smm 
 XRAY>!(3) element Np (Neptunium) has to be referred to as Npp 
 XRAY>!(3) types of elements with ionic state (i.e., +/-) specifications have 
 XRAY>!    to be put in double quotes in selection statements. 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old_sclib=$result) 
 EVALUATE: symbol $MESSAGE_OLD_SCLIB set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old_sclib=$result) 
 EVALUATE: symbol $ECHO_OLD_SCLIB set to TRUE (logical)
 XRAY>set echo=off message=off end 
 XRAY> 
 XRAY>   evaluate ($counter=1) 
 EVALUATE: symbol $COUNTER set to    1.00000     (real)
 XRAY>   evaluate ($done=false) 
 EVALUATE: symbol $DONE set to FALSE (logical)
 XRAY>   while ( $done = false ) loop read 
 NEXTCD: condition evaluated as true
 XRAY>    if ( &exist_reflection_infile_$counter = true ) then 
 NEXTCD: condition evaluated as true
 XRAY>      if ( &BLANK%reflection_infile_$counter = false ) then 
 NEXTCD: condition evaluated as true
 XRAY>       reflection 
 REFLection>         @@&reflection_infile_$counter 
 ASSFIL: file 1xoz-sf.cv opened.
 REFLection> remark a= 56.102 b= 76.397 c= 80.699 alpha= 90 beta= 103.18 gamma= 90 sg= C2 
 REFLection> remark symop (X,Y,Z) 
 REFLection> remark symop (-X,Y,-Z) 
 REFLection> remark symop (X+1/2,Y+1/2,Z) 
 REFLection> remark symop (-X+1/2,Y+1/2,-Z) 
 REFLection>CRYST1   56.102   76.397   80.699  90.00 103.18  90.00 C 2 
 REFLection> NREFlection=     75210 
 XRAY: increasing space allocation for up to   75210 reflections.
 REFLection> ANOMalous=FALSe { equiv. to HERMitian=TRUE} 
 REFLection> DECLare NAME=FOBS                   DOMAin=RECIprocal   TYPE=REAL END 
 XDECLARE: Object FOBS has been declared.
 REFLection> DECLare NAME=SIGMA                  DOMAin=RECIprocal   TYPE=REAL END 
 XDECLARE: Object SIGMA has been declared.
 REFLection> DECLare NAME=TEST                   DOMAin=RECIprocal   TYPE=INTE END 
 XDECLARE: Object TEST has been declared.
 REFLection> INDE   -40    0    1 FOBS=    32.500 SIGMA=    18.800 TEST=         0 
 XSFAL: allocating space for real reciprocal space object.
 XSFAL: allocating space for real reciprocal space object.
 XSFAL: allocating space for integer reciprocal space object.
 XRRR2:    75210 new h,k,l indices have been added.
 XRAY>      end if 
 XRAY>   else 
 XRAY>     evaluate ($done=true) 
 XRAY>   end if 
 XRAY>   evaluate ($counter=$counter+1) 
 EVALUATE: symbol $COUNTER set to    2.00000     (real)
 XRAY>  end loop read 
 XRAY>   while ( $done = false ) loop read 
 NEXTCD: condition evaluated as true
 XRAY>    if ( &exist_reflection_infile_$counter = true ) then 
 NEXTCD: condition evaluated as true
 XRAY>      if ( &BLANK%reflection_infile_$counter = false ) then 
 NEXTCD: condition evaluated as false
 XRAY>       reflection 
 XRAY>         @@&reflection_infile_$counter 
 XRAY>       end 
 XRAY>      end if 
 XRAY>   else 
 XRAY>     evaluate ($done=true) 
 XRAY>   end if 
 XRAY>   evaluate ($counter=$counter+1) 
 EVALUATE: symbol $COUNTER set to    3.00000     (real)
 XRAY>  end loop read 
 XRAY>   while ( $done = false ) loop read 
 NEXTCD: condition evaluated as true
 XRAY>    if ( &exist_reflection_infile_$counter = true ) then 
 NEXTCD: condition evaluated as true
 XRAY>      if ( &BLANK%reflection_infile_$counter = false ) then 
 NEXTCD: condition evaluated as false
 XRAY>       reflection 
 XRAY>         @@&reflection_infile_$counter 
 XRAY>       end 
 XRAY>      end if 
 XRAY>   else 
 XRAY>     evaluate ($done=true) 
 XRAY>   end if 
 XRAY>   evaluate ($counter=$counter+1) 
 EVALUATE: symbol $COUNTER set to    4.00000     (real)
 XRAY>  end loop read 
 XRAY>   while ( $done = false ) loop read 
 NEXTCD: condition evaluated as true
 XRAY>    if ( &exist_reflection_infile_$counter = true ) then 
 NEXTCD: condition evaluated as true
 XRAY>      if ( &BLANK%reflection_infile_$counter = false ) then 
 NEXTCD: condition evaluated as false
 XRAY>       reflection 
 XRAY>         @@&reflection_infile_$counter 
 XRAY>       end 
 XRAY>      end if 
 XRAY>   else 
 XRAY>     evaluate ($done=true) 
 XRAY>   end if 
 XRAY>   evaluate ($counter=$counter+1) 
 EVALUATE: symbol $COUNTER set to    5.00000     (real)
 XRAY>  end loop read 
 XRAY>   while ( $done = false ) loop read 
 NEXTCD: condition evaluated as true
 XRAY>    if ( &exist_reflection_infile_$counter = true ) then 
 NEXTCD: condition evaluated as false
 XRAY>      if ( &BLANK%reflection_infile_$counter = false ) then 
 XRAY>       reflection 
 XRAY>         @@&reflection_infile_$counter 
 XRAY>       end 
 XRAY>      end if 
 XRAY>   else 
 XRAY>     evaluate ($done=true) 
 EVALUATE: symbol $DONE set to TRUE (logical)
 XRAY>   end if 
 XRAY>   evaluate ($counter=$counter+1) 
 EVALUATE: symbol $COUNTER set to    6.00000     (real)
 XRAY>  end loop read 
 XRAY>   while ( $done = false ) loop read 
 NEXTCD: condition evaluated as false
 XRAY>    if ( &exist_reflection_infile_$counter = true ) then 
 XRAY>      if ( &BLANK%reflection_infile_$counter = false ) then 
 XRAY>       reflection 
 XRAY>         @@&reflection_infile_$counter 
 XRAY>       end 
 XRAY>      end if 
 XRAY>   else 
 XRAY>     evaluate ($done=true) 
 XRAY>   end if 
 XRAY>   evaluate ($counter=$counter+1) 
 XRAY>  end loop read 
 XRAY> 
 XRAY> end 
 CNSsolve> 
 CNSsolve> if ( &BLANK%anom_library = false ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   @@&anom_library 
 CNSsolve> else 
 CNSsolve>   set echo=off end 
 ANOMalous=FALSe {OFF}
 NEXTCD: condition evaluated as false
 CNSsolve> end if 
 CNSsolve> 
 CNSsolve> {- copy define parameters of optional arrays into symbols so 
 CNSsolve>    we can redefine them -} 
 CNSsolve> 
 CNSsolve> evaluate ($obs_i=&obs_i) 
 EVALUATE: symbol $OBS_I set to "" (string)
 CNSsolve> evaluate ($obs_sigi=&obs_sigi) 
 EVALUATE: symbol $OBS_SIGI set to "" (string)
 CNSsolve> evaluate ($obs_w=&obs_w) 
 EVALUATE: symbol $OBS_W set to "" (string)
 CNSsolve> xray 
 XRAY>   @@CNS_XTALMODULE:checkrefinput ( 
 ASSFIL: file checkrefinput opened.
 XRAY>! Module file: checkrefinput 
 XRAY>! 
 XRAY>! CNS module 
 XRAY>! ********** 
 XRAY>! 
 XRAY>! Authors: Axel Brunger and Paul Adams 
 XRAY>! 
 XRAY>! copyright Yale University 
 XRAY>! 
 XRAY>! Function: 
 XRAY>!    Checks the required input reciprocal space arrays 
 XRAY>! 
 XRAY>! Requirements: 
 XRAY>!    Needs to be called within xray 
 XRAY> 
 XRAY>module {checkrefinput} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &reftarget="residual"; {string} 
 MODULE-DECLARATION>  &obs_f;                {reciprocal space array} 
 MODULE-DECLARATION>  &obs_sigf;             {reciprocal space array} 
 MODULE-DECLARATION>  &test_set;             {reciprocal space array} 
 MODULE-DECLARATION>  &obs_pa;               {reciprocal space array} 
 MODULE-DECLARATION>  &obs_pb;               {reciprocal space array} 
 MODULE-DECLARATION>  &obs_pc;               {reciprocal space array} 
 MODULE-DECLARATION>  &obs_pd;               {reciprocal space array} 
 MODULE-DECLARATION>  &obs_phase;            {reciprocal space array} 
 MODULE-DECLARATION>  &obs_fom;              {reciprocal space array} 
 MODULE-DECLARATION>  &obs_w;                {reciprocal space array} 
 MODULE-DECLARATION>  &obs_i;                {reciprocal space array} 
 MODULE-DECLARATION>  &obs_sigi;             {reciprocal space array} 
 MODULE-DECLARATION>) 
 MODULE-INVOCATION>                                  reftarget=&reftarget; 
 &_2_REFTARGET set to &_1_REFTARGET 
 MODULE-INVOCATION>                                  obs_f=&obs_f; 
 &_2_OBS_F set to &_1_OBS_F 
 MODULE-INVOCATION>                                  obs_sigf=&obs_sigf; 
 &_2_OBS_SIGF set to &_1_OBS_SIGF 
 MODULE-INVOCATION>                                  test_set=&test_set; 
 &_2_TEST_SET set to &_1_TEST_SET 
 MODULE-INVOCATION>                                  obs_pa=&obs_pa; 
 &_2_OBS_PA set to &_1_OBS_PA 
 MODULE-INVOCATION>                                  obs_pb=&obs_pb; 
 &_2_OBS_PB set to &_1_OBS_PB 
 MODULE-INVOCATION>                                  obs_pc=&obs_pc; 
 &_2_OBS_PC set to &_1_OBS_PC 
 MODULE-INVOCATION>                                  obs_pd=&obs_pd; 
 &_2_OBS_PD set to &_1_OBS_PD 
 MODULE-INVOCATION>                                  obs_phase=&obs_phase; 
 &_2_OBS_PHASE set to &_1_OBS_PHASE 
 MODULE-INVOCATION>                                  obs_fom=&obs_fom; 
 &_2_OBS_FOM set to &_1_OBS_FOM 
 MODULE-INVOCATION>                                  obs_w=$obs_w; 
 &_2_OBS_W set to $_1_OBS_W 
 MODULE-INVOCATION>                                  obs_i=$obs_i; 
 &_2_OBS_I set to $_1_OBS_I 
 MODULE-INVOCATION>                                  obs_sigi=$obs_sigi; 
 &_2_OBS_SIGI set to $_1_OBS_SIGI 
 MODULE-INVOCATION>                                  ) 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old_cri=$result) 
 EVALUATE: symbol $MESSAGE_OLD_CRI set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old_cri=$result) 
 EVALUATE: symbol $ECHO_OLD_CRI set to TRUE (logical)
 XRAY>if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 XRAY>  set echo=on message=normal end 
 XRAY>else 
 XRAY>  set echo=off message=off end 
 XRAY> 
 XRAY>   query name=fcalc domain=reciprocal end 
 Reciprocal space object FCALC does not exist.
 XRAY>   if ( $object_exist = false ) then 
 NEXTCD: condition evaluated as true
 XRAY>      declare name=fcalc domain=reciprocal type=complex end 
 XDECLARE: Object FCALC has been declared.
 XRAY>   end if 
 XRAY>   declare name=fbulk domain=reciprocal type=complex end 
 XDECLARE: Object FBULK has been declared.
 XRAY>   do (fbulk=0) ( all ) 
 XSFAL: allocating space for complex reciprocal space object.
 Total of     75210 structure factor elements were selected.
 XRAY> 
 XRAY>   binresolution &low_res &high_res 
 XRAY>   mapresolution &high_res 
 XRAY> 
 XRAY>   if ( &obs_type = "intensity" ) then 
 NEXTCD: condition evaluated as false
 XRAY>     if ( &BLANK%obs_i = true ) then 
 XRAY>       display  Error: observed intensity array is undefined 
 XRAY>       display         aborting script 
 XRAY>       abort 
 XRAY>     end if 
 XRAY>     evaluate ($reject_obs=&obs_i) 
 XRAY>     evaluate ($reject_sig=&obs_sigi) 
 XRAY>   else 
 XRAY>     evaluate ($reject_obs=&obs_f) 
 EVALUATE: symbol $REJECT_OBS set to "fobs" (string)
 XRAY>     evaluate ($reject_sig=&obs_sigf) 
 EVALUATE: symbol $REJECT_SIG set to "sigma" (string)
 XRAY>   end if 
 XRAY> 
 XRAY>   declare name=ref_active domain=reciprocal type=integer end 
 XDECLARE: Object REF_ACTIVE has been declared.
 XRAY>   declare name=tst_active domain=reciprocal type=integer end 
 XDECLARE: Object TST_ACTIVE has been declared.
 XRAY> 
 XRAY>   do (ref_active=0) ( all ) 
 XSFAL: allocating space for integer reciprocal space object.
 Total of     75210 structure factor elements were selected.
 XRAY>   do (ref_active=1) ( ( $STRIP%reject_sig # 0 ) and 
 DO>                      ( &low_res >= d >= &high_res ) ) 
 Total of     67682 structure factor elements were selected.
 XRAY> 
 XRAY>   statistics overall 
 STATistics>     completeness 
 STATistics>     selection=( ref_active=1 ) 
 Total of     67682 structure factor elements were selected.
 STATistics>   end 
 XRAY>   evaluate ($total_compl=$expression1) 
 EVALUATE: symbol $TOTAL_COMPL set to   0.973842     (real)
 XRAY> 
 XRAY>   show sum(1) ( ref_active=1 ) 
 Sum of     67682 elements =             67682.0000
 XRAY>   evaluate ($total_read=$select) 
 EVALUATE: symbol $TOTAL_READ set to    67682.0     (real)
 XRAY>   evaluate ($total_theor=int(1./$total_compl * $total_read)) 
 EVALUATE: symbol $TOTAL_THEOR set to    69500.0     (real)
 XRAY> 
 XRAY>   show rms (amplitude($STRIP%reject_obs)) ( ref_active=1 ) 
 Rms of     67682 elements =               121.8191
 XRAY>   evaluate ($obs_high=$result*&obs_rms) 
 EVALUATE: symbol $OBS_HIGH set to   0.121819E+07 (real)
 XRAY>   show min (amplitude($STRIP%reject_obs)) ( ref_active=1 ) 
 Minimum of     67682 elements =                 6.7000
 XRAY>   evaluate ($obs_low=$result) 
 EVALUATE: symbol $OBS_LOW set to    6.70000     (real)
 XRAY> 
 XRAY>   do (ref_active=0) ( all ) 
 Total of     75210 structure factor elements were selected.
 XRAY>   do (ref_active=1) 
 DO>                  ( ( amplitude($STRIP%reject_obs) > &sigma_cut*$STRIP%reject_sig ) and 
 DO>                    ( $STRIP%reject_sig # 0 ) and 
 DO>                    ( $obs_low <= amplitude($STRIP%reject_obs) <= $obs_high ) and 
 DO>                    ( &low_res >= d >= &high_res ) ) 
 Total of     67682 structure factor elements were selected.
 XRAY> 
 XRAY>   do (tst_active=0) (all) 
 XSFAL: allocating space for integer reciprocal space object.
 Total of     75210 structure factor elements were selected.
 XRAY>   if ( &BLANK%test_set = false ) then 
 NEXTCD: condition evaluated as true
 XRAY>     do (tst_active=1) (ref_active=1 and &STRIP%test_set=&test_flag) 
 Total of      3442 structure factor elements were selected.
 XRAY>   end if 
 XRAY> 
 XRAY>   show sum(1) ( ref_active=1 and tst_active=0 ) 
 Sum of     64240 elements =             64240.0000
 XRAY>   evaluate ($total_work=$select) 
 EVALUATE: symbol $TOTAL_WORK set to    64240.0     (real)
 XRAY>   show sum(1) ( ref_active=1 and tst_active=1 ) 
 Sum of      3442 elements =              3442.0000
 XRAY>   evaluate ($total_test=$select) 
 EVALUATE: symbol $TOTAL_TEST set to    3442.00     (real)
 XRAY>   evaluate ($total_used=$total_work+$total_test) 
 EVALUATE: symbol $TOTAL_USED set to    67682.0     (real)
 XRAY> 
 XRAY>   evaluate ($unobserved=$total_theor-$total_read) 
 EVALUATE: symbol $UNOBSERVED set to    1818.00     (real)
 XRAY>   evaluate ($rejected=$total_read-$total_used) 
 EVALUATE: symbol $REJECTED set to    0.00000     (real)
 XRAY>   evaluate ($per_unobs=100*($unobserved/$total_theor)) 
 EVALUATE: symbol $PER_UNOBS set to    2.61583     (real)
 XRAY>   evaluate ($per_reject=100*($rejected/$total_theor)) 
 EVALUATE: symbol $PER_REJECT set to    0.00000     (real)
 XRAY>   evaluate ($per_used=100*($total_used/$total_theor)) 
 EVALUATE: symbol $PER_USED set to    97.3842     (real)
 XRAY>   evaluate ($per_work=100*($total_work/$total_theor)) 
 EVALUATE: symbol $PER_WORK set to    92.4317     (real)
 XRAY>   evaluate ($per_test=100*($total_test/$total_theor)) 
 EVALUATE: symbol $PER_TEST set to    4.95252     (real)
 XRAY> 
 XRAY>   associate fcalc ( &atom_select ) 
 SELRPN:   3020 atoms have been selected out of   3020
 XRAY> 
 XRAY>   tselection=( ref_active=1 ) 
 XRAY> 
 XRAY>   cvselection=( tst_active=1 ) 
 XRAY> 
 XRAY>   method=FFT 
 XRAY> 
 XRAY> {- MODIFIED 2/15/06 -} 
 XRAY> end 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> show min ( b ) ( &atom_select ) 
 SELRPN:   3020 atoms have been selected out of   3020
 SHOW: minimum of selected elements =       6.000000
 CNSsolve> evaluate ($b_min=$result) 
 EVALUATE: symbol $B_MIN set to    6.00000     (real)
 CNSsolve> @@CNS_XTALMODULE:fft_parameter_check ( 
 ASSFIL: file fft_parameter_check opened.
 CNSsolve>! Module file: fft_parameter_check 
 CNSsolve>! 
 CNSsolve>! Function: determines the optimum setting for the B-factor inflation 
 CNSsolve>! given the high resolution limit, the gridding factor, and the minimum 
 CNSsolve>! B-factor of the model.   It also determines the recommended ELIM parameter 
 CNSsolve>! as a function of the high resolution limit. 
 CNSsolve>! 
 CNSsolve>! Reference: 
 CNSsolve>! 
 CNSsolve>! Gerard Bricogne (2001), 
 CNSsolve>!   International Tables for Crystallography, Volume B, 2001, p. 87 
 CNSsolve>! 
 CNSsolve>! CNS module 
 CNSsolve>! ********** 
 CNSsolve>! 
 CNSsolve>! Authors: Axel T. Brunger and Paul D. Adams 
 CNSsolve>! 
 CNSsolve>! copyright Yale University 
 CNSsolve>! 
 CNSsolve>! Requirements: 
 CNSsolve>! This module can only be used from the main level of CNS. 
 CNSsolve>! 
 CNSsolve>! 08/03/06 ATB 
 CNSsolve> 
 CNSsolve>module {fft_parameter_check} 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION> &b_min=0;              {input: minimum B-factor of model} 
 MODULE-DECLARATION> &d_min=1.0;            {input: high resolution limit} 
 MODULE-DECLARATION> &q_factor=100;         {input: quality factor - 100 for 1% accuracy} 
 MODULE-DECLARATION> &grid=auto;            {input: if "auto" gridding factor is set automatically} 
 MODULE-DECLARATION>                        {       otherwise gridding factor set to <number>  } 
 MODULE-DECLARATION> &fft_memory=-1;        {input: fft memory; if "-1" use automatic mode } 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &fft_grid=$fft_grid;   {output: fft gridding factor} 
 MODULE-DECLARATION> &fft_b_add=$fft_b_add; {output: fft B addition} 
 MODULE-DECLARATION> &fft_elim=$fft_elim;   {output: fft elimit factor} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>) 
 MODULE-INVOCATION>                             d_min=&high_res; 
 &_2_D_MIN set to &_1_HIGH_RES 
 MODULE-INVOCATION>                             b_min=$b_min; 
 &_2_B_MIN set to $_1_B_MIN 
 MODULE-INVOCATION>                             grid=auto; 
 &_2_GRID set to auto 
 MODULE-INVOCATION>                             fft_memory=&fft_memory; 
 &_2_FFT_MEMORY set to &_1_FFT_MEMORY 
 MODULE-INVOCATION>                             fft_grid=$fft_grid; 
 &_2_FFT_GRID set to $_1_FFT_GRID 
 MODULE-INVOCATION>                             fft_b_add=$fft_b_add; 
 &_2_FFT_B_ADD set to $_1_FFT_B_ADD 
 MODULE-INVOCATION>                             fft_elim=$fft_elim; 
 &_2_FFT_ELIM set to $_1_FFT_ELIM 
 MODULE-INVOCATION>                                      ) 
 CNSsolve> 
 CNSsolve> set message ? end 
 MESSage=NORM
 CNSsolve> evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 CNSsolve> set echo ? end 
 ECHO=TRUE {ON}
 CNSsolve> evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 CNSsolve> if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   set echo=on message=normal end 
 CNSsolve> else 
 CNSsolve>   set echo=off message=off end 
 fft_parameter_check: using automatic memory option
 fft_parameter_check: minimum model B-factor = 6  A^2
 fft_parameter_check: high resolution limit = 1.37  A
 fft_parameter_check: fft gridding factor set to 0.3333
 fft_parameter_check: fft B factor offset set to 0  A^2
 fft_parameter_check: fft Elimit factor set to 10
 CNSsolve> 
 CNSsolve> 
 CNSsolve> xray 
 XRAY> {- END MODIFICATION -} 
 XRAY> 
 XRAY>   tolerance=0.0 lookup=false 
 XRAY> 
 XRAY>   if ( &wa >= 0 ) then 
 NEXTCD: condition evaluated as true
 XRAY>      wa=&wa 
 XRAY>   end if 
 XRAY> 
 XRAY> end 
 CNSsolve> 
 CNSsolve> if ( &BLANK%ncs_infile = false ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>    inline @&ncs_infile 
 CNSsolve> end if 
 CNSsolve> 
 CNSsolve> if ( &BLANK%restraints_infile = false ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>     @&restraints_infile 
 CNSsolve> end if 
 CNSsolve> 
 CNSsolve> do (store9=0) (all) 
 SELRPN:   3020 atoms have been selected out of   3020
 CNSsolve> 
 CNSsolve> evaluate ($nalt=1) 
 EVALUATE: symbol $NALT set to    1.00000     (real)
 CNSsolve> evaluate ($alt=1) 
 EVALUATE: symbol $ALT set to    1.00000     (real)
 CNSsolve> evaluate ($done=false) 
 EVALUATE: symbol $DONE set to FALSE (logical)
 CNSsolve> while ( $done = false ) loop nalt 
 NEXTCD: condition evaluated as true
 CNSsolve>   if ( &exist_conf_$alt = true ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>     show sum(1) ( &conf_$alt ) 
 SELRPN:      0 atoms have been selected out of   3020
 SHOW: zero atoms selected
 CNSsolve>     if ( $result > 0 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>       evaluate ($nalt=$nalt+1) 
 CNSsolve>     end if 
 CNSsolve>   else 
 CNSsolve>     evaluate ($done=true) 
 CNSsolve>     evaluate ($nalt=$nalt-1) 
 CNSsolve>   end if 
 CNSsolve>   evaluate ($alt=$alt+1) 
 EVALUATE: symbol $ALT set to    2.00000     (real)
 CNSsolve> end loop nalt 
 CNSsolve> while ( $done = false ) loop nalt 
 NEXTCD: condition evaluated as true
 CNSsolve>   if ( &exist_conf_$alt = true ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>     show sum(1) ( &conf_$alt ) 
 SELRPN:      0 atoms have been selected out of   3020
 SHOW: zero atoms selected
 CNSsolve>     if ( $result > 0 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>       evaluate ($nalt=$nalt+1) 
 CNSsolve>     end if 
 CNSsolve>   else 
 CNSsolve>     evaluate ($done=true) 
 CNSsolve>     evaluate ($nalt=$nalt-1) 
 CNSsolve>   end if 
 CNSsolve>   evaluate ($alt=$alt+1) 
 EVALUATE: symbol $ALT set to    3.00000     (real)
 CNSsolve> end loop nalt 
 CNSsolve> while ( $done = false ) loop nalt 
 NEXTCD: condition evaluated as true
 CNSsolve>   if ( &exist_conf_$alt = true ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>     show sum(1) ( &conf_$alt ) 
 SELRPN:      0 atoms have been selected out of   3020
 SHOW: zero atoms selected
 CNSsolve>     if ( $result > 0 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>       evaluate ($nalt=$nalt+1) 
 CNSsolve>     end if 
 CNSsolve>   else 
 CNSsolve>     evaluate ($done=true) 
 CNSsolve>     evaluate ($nalt=$nalt-1) 
 CNSsolve>   end if 
 CNSsolve>   evaluate ($alt=$alt+1) 
 EVALUATE: symbol $ALT set to    4.00000     (real)
 CNSsolve> end loop nalt 
 CNSsolve> while ( $done = false ) loop nalt 
 NEXTCD: condition evaluated as true
 CNSsolve>   if ( &exist_conf_$alt = true ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>     show sum(1) ( &conf_$alt ) 
 SELRPN:      0 atoms have been selected out of   3020
 SHOW: zero atoms selected
 CNSsolve>     if ( $result > 0 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>       evaluate ($nalt=$nalt+1) 
 CNSsolve>     end if 
 CNSsolve>   else 
 CNSsolve>     evaluate ($done=true) 
 CNSsolve>     evaluate ($nalt=$nalt-1) 
 CNSsolve>   end if 
 CNSsolve>   evaluate ($alt=$alt+1) 
 EVALUATE: symbol $ALT set to    5.00000     (real)
 CNSsolve> end loop nalt 
 CNSsolve> while ( $done = false ) loop nalt 
 NEXTCD: condition evaluated as true
 CNSsolve>   if ( &exist_conf_$alt = true ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>     show sum(1) ( &conf_$alt ) 
 CNSsolve>     if ( $result > 0 ) then 
 CNSsolve>       evaluate ($nalt=$nalt+1) 
 CNSsolve>     end if 
 CNSsolve>   else 
 CNSsolve>     evaluate ($done=true) 
 EVALUATE: symbol $DONE set to TRUE (logical)
 CNSsolve>     evaluate ($nalt=$nalt-1) 
 EVALUATE: symbol $NALT set to    0.00000     (real)
 CNSsolve>   end if 
 CNSsolve>   evaluate ($alt=$alt+1) 
 EVALUATE: symbol $ALT set to    6.00000     (real)
 CNSsolve> end loop nalt 
 CNSsolve> while ( $done = false ) loop nalt 
 NEXTCD: condition evaluated as false
 CNSsolve>   if ( &exist_conf_$alt = true ) then 
 CNSsolve>     show sum(1) ( &conf_$alt ) 
 CNSsolve>     if ( $result > 0 ) then 
 CNSsolve>       evaluate ($nalt=$nalt+1) 
 CNSsolve>     end if 
 CNSsolve>   else 
 CNSsolve>     evaluate ($done=true) 
 CNSsolve>     evaluate ($nalt=$nalt-1) 
 CNSsolve>   end if 
 CNSsolve>   evaluate ($alt=$alt+1) 
 CNSsolve> end loop nalt 
 CNSsolve> 
 CNSsolve> evaluate ($alt=1) 
 EVALUATE: symbol $ALT set to    1.00000     (real)
 CNSsolve> while ( $alt <= $nalt ) loop alt 
 NEXTCD: condition evaluated as false
 CNSsolve>   do (store9=$alt) ( &conf_$alt ) 
 CNSsolve>   evaluate ($alt=$alt+1) 
 CNSsolve> end loop alt 
 CNSsolve> 
 CNSsolve> igroup 
 IGROup>   interaction ( &atom_select and not(attr store9 > 0)) 
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN>               ( &atom_select and not(attr store9 > 0)) 
 SELRPN:   3020 atoms have been selected out of   3020
 IGROup>   evaluate ($alt=1) 
 EVALUATE: symbol $ALT set to    1.00000     (real)
 IGROup>   while ( $alt <= $nalt ) loop alcs 
 NEXTCD: condition evaluated as false
 IGROup>     interaction ( &atom_select and ( attr store9 = $alt or attr store9 = 0 )) 
 IGROup>                 ( &atom_select and ( attr store9 = $alt )) 
 IGROup>     evaluate ($alt=$alt+1) 
 IGROup>   end loop alcs 
 IGROup> end 
 CNSsolve> 
 CNSsolve> {- check isolated atoms and atoms at special positions and add to 
 CNSsolve>    list of fixed atoms if needed - store9 will be used -} 
 CNSsolve> 
 CNSsolve> @CNS_XTALMODULE:setupfixed ( 
 ASSFIL: file setupfixed opened.
 CNSsolve>! Module file: setupfixed 
 CNSsolve>! 
 CNSsolve>! CNS module 
 CNSsolve>! ********** 
 CNSsolve>! 
 CNSsolve>! Authors: Axel Brunger 
 CNSsolve>! 
 CNSsolve>! copyright Yale University 
 CNSsolve>! 
 CNSsolve>! Function: 
 CNSsolve>! 
 CNSsolve>!    Sets up fixed atom selection and 
 CNSsolve>!    performs various checks for 
 CNSsolve>!    1. isolated atoms 
 CNSsolve>!    2. isolated di-atomic molecules 
 CNSsolve>!    3. atoms at special positions 
 CNSsolve>! 
 CNSsolve>!    Adds isolated atoms, diatomic molecules, and/or special-position atoms to the 
 CNSsolve>!    fixed atom selection. 
 CNSsolve>! 
 CNSsolve>! Requirements: 
 CNSsolve>!    Needs to be called from cns main level 
 CNSsolve> 
 CNSsolve>module {setupfixed} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &mode;              {string}                 {"minimization", "cartesian", "torsion"} 
 MODULE-DECLARATION>  &atom_select;       {selection }             {input: all selected atoms for refinement} 
 MODULE-DECLARATION>  &atom_fixed;        {selection }             {input: explicitly fixed atoms} 
 MODULE-DECLARATION>  &atom_total_fixed;  {atomic property array } {output: all fixed atoms} 
 MODULE-DECLARATION>  &atom_multiplicity; {atomic property array } {output: multiplicity of atoms} 
 MODULE-DECLARATION>  &mset=$mset;        {symbol}                 {output: number of disconnected sets} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>) 
 MODULE-INVOCATION>                           mode="minimization"; 
 &_2_MODE set to "minimization" 
 MODULE-INVOCATION>                           atom_select=&atom_select; 
 &_2_ATOM_SELECT set to &_1_ATOM_SELECT 
 MODULE-INVOCATION>                           atom_fixed=&atom_fixed; 
 &_2_ATOM_FIXED set to &_1_ATOM_FIXED 
 MODULE-INVOCATION>                           atom_total_fixed=store9; 
 &_2_ATOM_TOTAL_FIXED set to store9 
 MODULE-INVOCATION>                           atom_multiplicity=rmsd; 
 &_2_ATOM_MULTIPLICITY set to rmsd 
 MODULE-INVOCATION>                           ) 
 CNSsolve> 
 CNSsolve>! 
 CNSsolve>!MODIFICATION: set message level to on for show statements, ATB 10/18/10 
 CNSsolve>! 
 CNSsolve> 
 CNSsolve> set message ? end 
 MESSage=NORM
 CNSsolve> evaluate ($message_old_fix=$result) 
 EVALUATE: symbol $MESSAGE_OLD_FIX set to "NORM" (string)
 CNSsolve> set echo ? end 
 ECHO=TRUE {ON}
 CNSsolve> evaluate ($echo_old_fix=$result) 
 EVALUATE: symbol $ECHO_OLD_FIX set to TRUE (logical)
 CNSsolve> if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   set echo=on message=normal end 
 CNSsolve> else 
 CNSsolve>   set echo=off message=off end 
 CONNECt: selected atoms form    356 covalently disconnected set(s)

 list of isolated (non-covalently bonded) atoms:
 SELRPN:    354 atoms have been selected out of   3020
 ( A    ZN   1    ZN   )  ZN  
 ( A    MG   2    MG   )  MG  
 ( A    HOH  1001 O    )  O   
 ( A    HOH  1002 O    )  O   
 ( A    HOH  1003 O    )  O   
 ( A    HOH  1004 O    )  O   
 ( A    HOH  1005 O    )  O   
 ( A    HOH  1006 O    )  O   
 ( A    HOH  1007 O    )  O   
 ( A    HOH  1008 O    )  O   
 ( A    HOH  1009 O    )  O   
 ( A    HOH  1010 O    )  O   
 ( A    HOH  1011 O    )  O   
 ( A    HOH  1012 O    )  O   
 ( A    HOH  1013 O    )  O   
 ( A    HOH  1014 O    )  O   
 ( A    HOH  1015 O    )  O   
 ( A    HOH  1016 O    )  O   
 ( A    HOH  1017 O    )  O   
 ( A    HOH  1018 O    )  O   
 ( A    HOH  1019 O    )  O   
 ( A    HOH  1020 O    )  O   
 ( A    HOH  1021 O    )  O   
 ( A    HOH  1022 O    )  O   
 ( A    HOH  1023 O    )  O   
 ( A    HOH  1024 O    )  O   
 ( A    HOH  1025 O    )  O   
 ( A    HOH  1026 O    )  O   
 ( A    HOH  1027 O    )  O   
 ( A    HOH  1028 O    )  O   
 ( A    HOH  1029 O    )  O   
 ( A    HOH  1030 O    )  O   
 ( A    HOH  1031 O    )  O   
 ( A    HOH  1032 O    )  O   
 ( A    HOH  1033 O    )  O   
 ( A    HOH  1034 O    )  O   
 ( A    HOH  1035 O    )  O   
 ( A    HOH  1036 O    )  O   
 ( A    HOH  1037 O    )  O   
 ( A    HOH  1038 O    )  O   
 ( A    HOH  1039 O    )  O   
 ( A    HOH  1040 O    )  O   
 ( A    HOH  1041 O    )  O   
 ( A    HOH  1042 O    )  O   
 ( A    HOH  1043 O    )  O   
 ( A    HOH  1044 O    )  O   
 ( A    HOH  1045 O    )  O   
 ( A    HOH  1046 O    )  O   
 ( A    HOH  1047 O    )  O   
 ( A    HOH  1048 O    )  O   
 ( A    HOH  1049 O    )  O   
 ( A    HOH  1050 O    )  O   
 ( A    HOH  1051 O    )  O   
 ( A    HOH  1052 O    )  O   
 ( A    HOH  1053 O    )  O   
 ( A    HOH  1054 O    )  O   
 ( A    HOH  1055 O    )  O   
 ( A    HOH  1056 O    )  O   
 ( A    HOH  1057 O    )  O   
 ( A    HOH  1058 O    )  O   
 ( A    HOH  1059 O    )  O   
 ( A    HOH  1060 O    )  O   
 ( A    HOH  1061 O    )  O   
 ( A    HOH  1062 O    )  O   
 ( A    HOH  1063 O    )  O   
 ( A    HOH  1064 O    )  O   
 ( A    HOH  1065 O    )  O   
 ( A    HOH  1066 O    )  O   
 ( A    HOH  1067 O    )  O   
 ( A    HOH  1068 O    )  O   
 ( A    HOH  1069 O    )  O   
 ( A    HOH  1070 O    )  O   
 ( A    HOH  1071 O    )  O   
 ( A    HOH  1072 O    )  O   
 ( A    HOH  1073 O    )  O   
 ( A    HOH  1074 O    )  O   
 ( A    HOH  1075 O    )  O   
 ( A    HOH  1076 O    )  O   
 ( A    HOH  1077 O    )  O   
 ( A    HOH  1078 O    )  O   
 ( A    HOH  1079 O    )  O   
 ( A    HOH  1080 O    )  O   
 ( A    HOH  1081 O    )  O   
 ( A    HOH  1082 O    )  O   
 ( A    HOH  1083 O    )  O   
 ( A    HOH  1084 O    )  O   
 ( A    HOH  1085 O    )  O   
 ( A    HOH  1086 O    )  O   
 ( A    HOH  1087 O    )  O   
 ( A    HOH  1088 O    )  O   
 ( A    HOH  1089 O    )  O   
 ( A    HOH  1090 O    )  O   
 ( A    HOH  1091 O    )  O   
 ( A    HOH  1092 O    )  O   
 ( A    HOH  1093 O    )  O   
 ( A    HOH  1094 O    )  O   
 ( A    HOH  1095 O    )  O   
 ( A    HOH  1096 O    )  O   
 ( A    HOH  1097 O    )  O   
 ( A    HOH  1098 O    )  O   
 ( A    HOH  1099 O    )  O   
 ( A    HOH  1100 O    )  O   
 ( A    HOH  1101 O    )  O   
 ( A    HOH  1102 O    )  O   
 ( A    HOH  1103 O    )  O   
 ( A    HOH  1104 O    )  O   
 ( A    HOH  1105 O    )  O   
 ( A    HOH  1106 O    )  O   
 ( A    HOH  1107 O    )  O   
 ( A    HOH  1108 O    )  O   
 ( A    HOH  1109 O    )  O   
 ( A    HOH  1110 O    )  O   
 ( A    HOH  1111 O    )  O   
 ( A    HOH  1112 O    )  O   
 ( A    HOH  1113 O    )  O   
 ( A    HOH  1114 O    )  O   
 ( A    HOH  1115 O    )  O   
 ( A    HOH  1116 O    )  O   
 ( A    HOH  1117 O    )  O   
 ( A    HOH  1118 O    )  O   
 ( A    HOH  1119 O    )  O   
 ( A    HOH  1120 O    )  O   
 ( A    HOH  1121 O    )  O   
 ( A    HOH  1122 O    )  O   
 ( A    HOH  1123 O    )  O   
 ( A    HOH  1124 O    )  O   
 ( A    HOH  1125 O    )  O   
 ( A    HOH  1126 O    )  O   
 ( A    HOH  1127 O    )  O   
 ( A    HOH  1128 O    )  O   
 ( A    HOH  1129 O    )  O   
 ( A    HOH  1130 O    )  O   
 ( A    HOH  1131 O    )  O   
 ( A    HOH  1132 O    )  O   
 ( A    HOH  1133 O    )  O   
 ( A    HOH  1134 O    )  O   
 ( A    HOH  1135 O    )  O   
 ( A    HOH  1136 O    )  O   
 ( A    HOH  1137 O    )  O   
 ( A    HOH  1138 O    )  O   
 ( A    HOH  1139 O    )  O   
 ( A    HOH  1140 O    )  O   
 ( A    HOH  1141 O    )  O   
 ( A    HOH  1142 O    )  O   
 ( A    HOH  1143 O    )  O   
 ( A    HOH  1144 O    )  O   
 ( A    HOH  1145 O    )  O   
 ( A    HOH  1146 O    )  O   
 ( A    HOH  1147 O    )  O   
 ( A    HOH  1148 O    )  O   
 ( A    HOH  1149 O    )  O   
 ( A    HOH  1150 O    )  O   
 ( A    HOH  1151 O    )  O   
 ( A    HOH  1152 O    )  O   
 ( A    HOH  1153 O    )  O   
 ( A    HOH  1154 O    )  O   
 ( A    HOH  1155 O    )  O   
 ( A    HOH  1156 O    )  O   
 ( A    HOH  1157 O    )  O   
 ( A    HOH  1158 O    )  O   
 ( A    HOH  1159 O    )  O   
 ( A    HOH  1160 O    )  O   
 ( A    HOH  1161 O    )  O   
 ( A    HOH  1162 O    )  O   
 ( A    HOH  1163 O    )  O   
 ( A    HOH  1164 O    )  O   
 ( A    HOH  1165 O    )  O   
 ( A    HOH  1166 O    )  O   
 ( A    HOH  1167 O    )  O   
 ( A    HOH  1168 O    )  O   
 ( A    HOH  1169 O    )  O   
 ( A    HOH  1170 O    )  O   
 ( A    HOH  1171 O    )  O   
 ( A    HOH  1172 O    )  O   
 ( A    HOH  1173 O    )  O   
 ( A    HOH  1174 O    )  O   
 ( A    HOH  1175 O    )  O   
 ( A    HOH  1176 O    )  O   
 ( A    HOH  1177 O    )  O   
 ( A    HOH  1178 O    )  O   
 ( A    HOH  1179 O    )  O   
 ( A    HOH  1180 O    )  O   
 ( A    HOH  1181 O    )  O   
 ( A    HOH  1182 O    )  O   
 ( A    HOH  1183 O    )  O   
 ( A    HOH  1184 O    )  O   
 ( A    HOH  1185 O    )  O   
 ( A    HOH  1186 O    )  O   
 ( A    HOH  1187 O    )  O   
 ( A    HOH  1188 O    )  O   
 ( A    HOH  1189 O    )  O   
 ( A    HOH  1190 O    )  O   
 ( A    HOH  1191 O    )  O   
 ( A    HOH  1192 O    )  O   
 ( A    HOH  1193 O    )  O   
 ( A    HOH  1194 O    )  O   
 ( A    HOH  1195 O    )  O   
 ( A    HOH  1196 O    )  O   
 ( A    HOH  1197 O    )  O   
 ( A    HOH  1198 O    )  O   
 ( A    HOH  1199 O    )  O   
 ( A    HOH  1200 O    )  O   
 ( A    HOH  1201 O    )  O   
 ( A    HOH  1202 O    )  O   
 ( A    HOH  1203 O    )  O   
 ( A    HOH  1204 O    )  O   
 ( A    HOH  1205 O    )  O   
 ( A    HOH  1206 O    )  O   
 ( A    HOH  1207 O    )  O   
 ( A    HOH  1208 O    )  O   
 ( A    HOH  1209 O    )  O   
 ( A    HOH  1210 O    )  O   
 ( A    HOH  1211 O    )  O   
 ( A    HOH  1212 O    )  O   
 ( A    HOH  1213 O    )  O   
 ( A    HOH  1214 O    )  O   
 ( A    HOH  1215 O    )  O   
 ( A    HOH  1216 O    )  O   
 ( A    HOH  1217 O    )  O   
 ( A    HOH  1218 O    )  O   
 ( A    HOH  1219 O    )  O   
 ( A    HOH  1220 O    )  O   
 ( A    HOH  1221 O    )  O   
 ( A    HOH  1222 O    )  O   
 ( A    HOH  1223 O    )  O   
 ( A    HOH  1224 O    )  O   
 ( A    HOH  1225 O    )  O   
 ( A    HOH  1226 O    )  O   
 ( A    HOH  1227 O    )  O   
 ( A    HOH  1228 O    )  O   
 ( A    HOH  1229 O    )  O   
 ( A    HOH  1230 O    )  O   
 ( A    HOH  1231 O    )  O   
 ( A    HOH  1232 O    )  O   
 ( A    HOH  1233 O    )  O   
 ( A    HOH  1234 O    )  O   
 ( A    HOH  1235 O    )  O   
 ( A    HOH  1236 O    )  O   
 ( A    HOH  1237 O    )  O   
 ( A    HOH  1238 O    )  O   
 ( A    HOH  1239 O    )  O   
 ( A    HOH  1240 O    )  O   
 ( A    HOH  1241 O    )  O   
 ( A    HOH  1242 O    )  O   
 ( A    HOH  1243 O    )  O   
 ( A    HOH  1244 O    )  O   
 ( A    HOH  1245 O    )  O   
 ( A    HOH  1246 O    )  O   
 ( A    HOH  1247 O    )  O   
 ( A    HOH  1248 O    )  O   
 ( A    HOH  1249 O    )  O   
 ( A    HOH  1250 O    )  O   
 ( A    HOH  1251 O    )  O   
 ( A    HOH  1252 O    )  O   
 ( A    HOH  1253 O    )  O   
 ( A    HOH  1254 O    )  O   
 ( A    HOH  1255 O    )  O   
 ( A    HOH  1256 O    )  O   
 ( A    HOH  1257 O    )  O   
 ( A    HOH  1258 O    )  O   
 ( A    HOH  1259 O    )  O   
 ( A    HOH  1260 O    )  O   
 ( A    HOH  1261 O    )  O   
 ( A    HOH  1262 O    )  O   
 ( A    HOH  1263 O    )  O   
 ( A    HOH  1264 O    )  O   
 ( A    HOH  1265 O    )  O   
 ( A    HOH  1266 O    )  O   
 ( A    HOH  1267 O    )  O   
 ( A    HOH  1268 O    )  O   
 ( A    HOH  1269 O    )  O   
 ( A    HOH  1270 O    )  O   
 ( A    HOH  1271 O    )  O   
 ( A    HOH  1272 O    )  O   
 ( A    HOH  1273 O    )  O   
 ( A    HOH  1274 O    )  O   
 ( A    HOH  1275 O    )  O   
 ( A    HOH  1276 O    )  O   
 ( A    HOH  1277 O    )  O   
 ( A    HOH  1278 O    )  O   
 ( A    HOH  1279 O    )  O   
 ( A    HOH  1280 O    )  O   
 ( A    HOH  1281 O    )  O   
 ( A    HOH  1282 O    )  O   
 ( A    HOH  1283 O    )  O   
 ( A    HOH  1284 O    )  O   
 ( A    HOH  1285 O    )  O   
 ( A    HOH  1286 O    )  O   
 ( A    HOH  1287 O    )  O   
 ( A    HOH  1288 O    )  O   
 ( A    HOH  1289 O    )  O   
 ( A    HOH  1290 O    )  O   
 ( A    HOH  1291 O    )  O   
 ( A    HOH  1292 O    )  O   
 ( A    HOH  1293 O    )  O   
 ( A    HOH  1294 O    )  O   
 ( A    HOH  1295 O    )  O   
 ( A    HOH  1296 O    )  O   
 ( A    HOH  1297 O    )  O   
 ( A    HOH  1298 O    )  O   
 ( A    HOH  1299 O    )  O   
 ( A    HOH  1300 O    )  O   
 ( A    HOH  1301 O    )  O   
 ( A    HOH  1302 O    )  O   
 ( A    HOH  1303 O    )  O   
 ( A    HOH  1304 O    )  O   
 ( A    HOH  1305 O    )  O   
 ( A    HOH  1306 O    )  O   
 ( A    HOH  1307 O    )  O   
 ( A    HOH  1308 O    )  O   
 ( A    HOH  1309 O    )  O   
 ( A    HOH  1310 O    )  O   
 ( A    HOH  1311 O    )  O   
 ( A    HOH  1312 O    )  O   
 ( A    HOH  1313 O    )  O   
 ( A    HOH  1314 O    )  O   
 ( A    HOH  1315 O    )  O   
 ( A    HOH  1316 O    )  O   
 ( A    HOH  1317 O    )  O   
 ( A    HOH  1318 O    )  O   
 ( A    HOH  1319 O    )  O   
 ( A    HOH  1320 O    )  O   
 ( A    HOH  1321 O    )  O   
 ( A    HOH  1322 O    )  O   
 ( A    HOH  1323 O    )  O   
 ( A    HOH  1324 O    )  O   
 ( A    HOH  1325 O    )  O   
 ( A    HOH  1326 O    )  O   
 ( A    HOH  1327 O    )  O   
 ( A    HOH  1328 O    )  O   
 ( A    HOH  1329 O    )  O   
 ( A    HOH  1330 O    )  O   
 ( A    HOH  1331 O    )  O   
 ( A    HOH  1332 O    )  O   
 ( A    HOH  1333 O    )  O   
 ( A    HOH  1334 O    )  O   
 ( A    HOH  1335 O    )  O   
 ( A    HOH  1336 O    )  O   
 ( A    HOH  1337 O    )  O   
 ( A    HOH  1338 O    )  O   
 ( A    HOH  1339 O    )  O   
 ( A    HOH  1340 O    )  O   
 ( A    HOH  1341 O    )  O   
 ( A    HOH  1342 O    )  O   
 ( A    HOH  1343 O    )  O   
 ( A    HOH  1344 O    )  O   
 ( A    HOH  1345 O    )  O   
 ( A    HOH  1346 O    )  O   
 ( A    HOH  1347 O    )  O   
 ( A    HOH  1348 O    )  O   
 ( A    HOH  1349 O    )  O   
 ( A    HOH  1350 O    )  O   
 ( A    HOH  1351 O    )  O   
 ( A    HOH  1352 O    )  O   

 list of isolated (non-covalently bonded) di-atomic molecules:
 SELRPN:      0 atoms have been selected out of   3020
 SHOW: zero atoms selected
 --none--

 list of atoms at special positions:
 SELRPN:      0 atoms have been selected out of   3020
 SHOW: zero atoms selected
 --none--


 SELRPN:      0 atoms have been selected out of   3020
 SHOW: zero atoms selected

 0 atoms at special positions,
 explicitly fixed atoms, and atoms not selected for
 refinement will be fixed.

 CNSsolve> 
 CNSsolve> fix selection=( store9 ) end 
 SELRPN:      0 atoms have been selected out of   3020
 CNSsolve> 
 CNSsolve> fastnb grid end 
 CNSsolve> 
 CNSsolve> flags 
 FLAGS>    exclude * include xref 
 FLAGS>   ? 
 EFLAGS: the following energy flags are set
 EFLAGS: XREF
 FLAGS> end 
 CNSsolve> 
 CNSsolve> if ( &BLANK%force_field_infile = true ) then 
 NEXTCD: condition evaluated as true
 CNSsolve>    flags 
 FLAGS>       exclude elec pele vdw pvdw 
 FLAGS>      ? 
 EFLAGS: the following energy flags are set
 EFLAGS: XREF
 FLAGS>    end 
 CNSsolve> else 
 CNSsolve>     @&force_field_infile 
 CNSsolve> end if 
 CNSsolve> 
 CNSsolve> show sum(1) (&atom_harm) 
 SELRPN:      0 atoms have been selected out of   3020
 SHOW: zero atoms selected
 CNSsolve> if ( $result > 0 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   evaluate ($harmonic=true) 
 CNSsolve> else 
 CNSsolve>   evaluate ($harmonic=false) 
 EVALUATE: symbol $HARMONIC set to FALSE (logical)
 CNSsolve> end if 
 CNSsolve> 
 CNSsolve> xray 
 XRAY>   predict 
 PREDict>     mode=reciprocal 
 PREDict>     to=fcalc 
 PREDict>     selection=(ref_active=1) 
 Total of     67682 structure factor elements were selected.
 PREDict>     atomselection=( &atom_select ) 
 SELRPN:   3020 atoms have been selected out of   3020
 PREDict>   end 
 FCALC: #scatt.=   3020 #anomalous=   0 #special pos.=  0 occupancies=1
 XSFAL: allocating space for complex reciprocal space object.
 %XFFT-AUTOmem: increasing memory allocation to    2000000
 XFFT: using grid [ 125, 180, 180] and sublattice [ 125( 125), 180( 181),  60]
 XRAY> end 
 CNSsolve> 
 CNSsolve> {- BEGIN MODIFICATION -} 
 CNSsolve> @CNS_XTALMODULE:scale_and_solvent_grid_search ( 
 ASSFIL: file scale_and_solvent_grid_search opened.
 CNSsolve>! Module file: scale_and_solvent_grid_search 
 CNSsolve>! 
 CNSsolve>! Function: determines best bulk solvent model by a grid search in ( k_sol ) space. 
 CNSsolve>!           For each pair of values, the optimum B_sol is determined by least-squares minimization. 
 CNSsolve>!           The module also computes an overall (an)-isotropic B-tensor and applies the isotropic component to the 
 CNSsolve>!           model structure factors, and bulk solvent structure factors; the negated modified 
 CNSsolve>!           B-tensor (-Ucif, with the isotropic component removed) is then applied to the 
 CNSsolve>!           observed amplitudes, sigmas, intensities, and their sigmas.  The corresponding Ucart is 
 CNSsolve>!           passed back to the calling script file. 
 CNSsolve>! 
 CNSsolve>! 
 CNSsolve>! CNS module 
 CNSsolve>! ********** 
 CNSsolve>! 
 CNSsolve>! Authors: Axel T. Brunger and Paul D. Adams 
 CNSsolve>! 
 CNSsolve>! copyright Yale University 
 CNSsolve>! 
 CNSsolve>! Requirements: 
 CNSsolve>! This module can only be used from the main level of CNS. 
 CNSsolve>! 
 CNSsolve>! 6/28/2006 
 CNSsolve> 
 CNSsolve>module {scale_and_solvent_grid_search} 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION> &bscale="no";         {input: "no" | "isotropic" | "anisotropic" } 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &sel=all;             {input: all active structure factors} 
 MODULE-DECLARATION> &sel_test=none;       {input: test set reflections} 
 MODULE-DECLARATION> &atom_select=( all ); {input: atom selection for all atoms that contribute to calculated structure factor} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &bulk_sol=false;      {input: logical flag (true/false) specifying if bulk solvent correction should be computed} 
 MODULE-DECLARATION> &bulk_mask="";        {optional input: mask file for bulk solvent model - it not specified mask will be generated from selected atoms} 
 MODULE-DECLARATION> &bulk_atoms=( all );  {input: atoms used to create solvent mask} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &sol_auto=true;       {input: logical flag (true/false) specifying if grid search shall be performed } 
 MODULE-DECLARATION> &sol_k=0.3;           {for sol_auto=false: solvent density fixed at specified value} 
 MODULE-DECLARATION> &sol_b=50.;           {for sol_auto=false: solvent B factor fixed at specified value} 
 MODULE-DECLARATION> &sol_rad=1.0;         {solvent radius (fixed at specified value)} 
 MODULE-DECLARATION> &sol_shrink=1.0;      {shrink factor (fixed at specified value)} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &sol_k_range=0.1 0.2 0.25 0.28 0.30 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.4 0.42 0.45 0.5 0.6; {for sol_auto=true: parameters for sol_k grid search} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &fcalc="";            {input/output: calculated structure factors - modified at output (isotropic portion of B-tensor applied)} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &obs_f="";            {input/output: observed structure factors - modified at output (negative of anisotropic B-tensor (w/o isotropic portion) applied)} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &obs_sigf="";         {input/putput: corresponding sigma array - modified at output (negative of anisotropic B-tensor (w/o isotropic portion) applied)} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &obs_i="";            {input/output: observed intensity data - modified at output (negative of anisotropic B-tensor (w/o isotropic portion) applied)} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &obs_sigi="";         {input/output: corresponding sigma array - modified at output (negative of anisotropic B-tensor (w/o isotropic portion) applied)} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &fpart="";            {output: bulk solvent structure factors (isotropic portion of B-tensor applied)} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &Baniso_11;           {required output: anisotropic B-tensor (Ucart) of atomic model, with isotropic component removed } 
 MODULE-DECLARATION> &Baniso_22; 
 MODULE-DECLARATION> &Baniso_33; 
 MODULE-DECLARATION> &Baniso_12; 
 MODULE-DECLARATION> &Baniso_13; 
 MODULE-DECLARATION> &Baniso_23; 
 MODULE-DECLARATION> &Biso;                {required output: isotropic component of the B-tensor } 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &sol_k_best;          {required output: k_sol of best solvent model} 
 MODULE-DECLARATION> &sol_b_best;          {required output: b_sol of best solvent model} 
 MODULE-DECLARATION> &solrad_best;         {required output: solrad of solvent model that was actually used (for compatibility with previous versions of this module)} 
 MODULE-DECLARATION> &shrink_best;         {required output: shrink value of solvent model that was actually used (for compatibility with previous versions of this module)} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &b=b;                 {input/output: atomic B-factor array - isotropic portion of B-factor tensor added } 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &low_b_flag;          {required output: if true then there were some negative B-factors that have been set to zero } 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &sol_output="";       {optional output: listing filename for grid search} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>) 
 MODULE-INVOCATION>                             bscale=&bscale; 
 &_2_BSCALE set to &_1_BSCALE 
 MODULE-INVOCATION>                             sel=( ref_active=1 ); 
 &_2_SEL set to ( ref_active = 1 ) 
 MODULE-INVOCATION>                             sel_test=( tst_active=1 ); 
 &_2_SEL_TEST set to ( tst_active = 1 ) 
 MODULE-INVOCATION>                             atom_select=( &atom_select ); 
 &_2_ATOM_SELECT set to ( &_1_ATOM_SELECT ) 
 MODULE-INVOCATION>                             bulk_sol=&bulk_sol; 
 &_2_BULK_SOL set to &_1_BULK_SOL 
 MODULE-INVOCATION>                             bulk_mask=&bulk_mask_infile; 
 &_2_BULK_MASK set to &_1_BULK_MASK_INFILE 
 MODULE-INVOCATION>                             bulk_atoms=( &atom_select ); 
 &_2_BULK_ATOMS set to ( &_1_ATOM_SELECT ) 
 MODULE-INVOCATION> 
 MODULE-INVOCATION>                             sol_auto=&sol_auto; 
 &_2_SOL_AUTO set to &_1_SOL_AUTO 
 MODULE-INVOCATION>                             sol_k=&sol_k; 
 &_2_SOL_K set to &_1_SOL_K 
 MODULE-INVOCATION>                             sol_b=&sol_b; 
 &_2_SOL_B set to &_1_SOL_B 
 MODULE-INVOCATION>                             sol_rad=&sol_rad; 
 &_2_SOL_RAD set to &_1_SOL_RAD 
 MODULE-INVOCATION>                             sol_shrink=&sol_shrink; 
 &_2_SOL_SHRINK set to &_1_SOL_SHRINK 
 MODULE-INVOCATION> 
 MODULE-INVOCATION>                             fcalc=fcalc; 
 &_2_FCALC set to fcalc 
 MODULE-INVOCATION>                             obs_f=&STRIP%obs_f; 
 &_2_OBS_F set to &STRIP%_1_OBS_F 
 MODULE-INVOCATION>                             obs_sigf=&STRIP%obs_sigf; 
 &_2_OBS_SIGF set to &STRIP%_1_OBS_SIGF 
 MODULE-INVOCATION>                             obs_i=$STRIP%obs_i; 
 &_2_OBS_I set to $STRIP%_1_OBS_I 
 MODULE-INVOCATION>                             obs_sigi=$STRIP%obs_sigi; 
 &_2_OBS_SIGI set to $STRIP%_1_OBS_SIGI 
 MODULE-INVOCATION>                             fpart=fbulk; 
 &_2_FPART set to fbulk 
 MODULE-INVOCATION> 
 MODULE-INVOCATION>! 
 MODULE-INVOCATION>! Begin modification (6/28/06) 
 MODULE-INVOCATION>                             Baniso_11=$Baniso_11; 
 &_2_BANISO_11 set to $_1_BANISO_11 
 MODULE-INVOCATION>                             Baniso_22=$Baniso_22; 
 &_2_BANISO_22 set to $_1_BANISO_22 
 MODULE-INVOCATION>                             Baniso_33=$Baniso_33; 
 &_2_BANISO_33 set to $_1_BANISO_33 
 MODULE-INVOCATION>                             Baniso_12=$Baniso_12; 
 &_2_BANISO_12 set to $_1_BANISO_12 
 MODULE-INVOCATION>                             Baniso_13=$Baniso_13; 
 &_2_BANISO_13 set to $_1_BANISO_13 
 MODULE-INVOCATION>                             Baniso_23=$Baniso_23; 
 &_2_BANISO_23 set to $_1_BANISO_23 
 MODULE-INVOCATION>                             Biso=$Biso_model; 
 &_2_BISO set to $_1_BISO_MODEL 
 MODULE-INVOCATION>! End modification 
 MODULE-INVOCATION>! 
 MODULE-INVOCATION> 
 MODULE-INVOCATION>                             sol_k_best=$sol_k_ref; 
 &_2_SOL_K_BEST set to $_1_SOL_K_REF 
 MODULE-INVOCATION>                             sol_b_best=$sol_b_ref; 
 &_2_SOL_B_BEST set to $_1_SOL_B_REF 
 MODULE-INVOCATION>			     solrad_best=$solrad_best; 
 &_2_SOLRAD_BEST set to $_1_SOLRAD_BEST 
 MODULE-INVOCATION>			     shrink_best=$shrink_best; 
 &_2_SHRINK_BEST set to $_1_SHRINK_BEST 
 MODULE-INVOCATION> 
 MODULE-INVOCATION>                             b=b; 
 &_2_B set to b 
 MODULE-INVOCATION> 
 MODULE-INVOCATION>                             low_b_flag=$low_b_flag; 
 &_2_LOW_B_FLAG set to $_1_LOW_B_FLAG 
 MODULE-INVOCATION> 
 MODULE-INVOCATION>                             sol_output=&sol_output; 
 &_2_SOL_OUTPUT set to &_1_SOL_OUTPUT 
 MODULE-INVOCATION> 
 MODULE-INVOCATION>                             ) 
 CNSsolve> 
 CNSsolve> set message ? end 
 MESSage=NORM
 CNSsolve> evaluate ($message_old2=$result) 
 EVALUATE: symbol $MESSAGE_OLD2 set to "NORM" (string)
 CNSsolve> set echo ? end 
 ECHO=TRUE {ON}
 CNSsolve> evaluate ($echo_old2=$result) 
 EVALUATE: symbol $ECHO_OLD2 set to TRUE (logical)
 CNSsolve> if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   set echo=on message=normal end 
 CNSsolve> else 
 CNSsolve>   set echo=off message=off end 

 trying solvent model with fixed k_sol = 0.1 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 adjusted grid parameter for solvent mask calculation.  It is now  : 0.416058
 XMASK:     3020 atoms have been selected for mask calculation.
 Minimum brick that covers asymmetric unit:
   A=     0,...,    50  B=     0,...,    72  C=     0,...,   144
 XMASK: average mask radius around selected atoms  1.6648 A
 XMASK: probe radius=  1.0000 shrink radius=  1.0000
 XMASK: volume inside mask=   64.2043% (MASK<=0)
 XMASK: volume outside mask=   35.7957% (MASK=1)
 XRMAPR: symmetry or unitcell changed. Real space obj. deleted.
 %XSCALE: aborting termination - errors.
 %%%XSCALE-err: diverging from solution.
 XSCALE: K<i> has been multiplied by the overall scale ($XSCFFK)   0.541
 refined solvent parameters: sol_k = 0.1  sol_b = -6.10248
>>>> Overall R-value for test set: 0.260472
>>>> Overall R-value for working set: 0.250508

 trying solvent model with fixed k_sol = 0.2 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 %XSCALE: aborting termination - errors.
 %%%XSCALE-err: diverging from solution.
 XSCALE: K<i> has been multiplied by the overall scale ($XSCFFK)   0.577
 refined solvent parameters: sol_k = 0.2  sol_b = 8.15817
>>>> Overall R-value for test set: 0.242285
>>>> Overall R-value for working set: 0.232124

 trying solvent model with fixed k_sol = 0.25 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.25  sol_b = 16.1079
>>>> Overall R-value for test set: 0.235706
>>>> Overall R-value for working set: 0.225385

 trying solvent model with fixed k_sol = 0.28 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.28  sol_b = 21.5601
>>>> Overall R-value for test set: 0.233079
>>>> Overall R-value for working set: 0.222786

 trying solvent model with fixed k_sol = 0.3 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.3  sol_b = 25.2477
>>>> Overall R-value for test set: 0.231502
>>>> Overall R-value for working set: 0.221334

 trying solvent model with fixed k_sol = 0.32 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.32  sol_b = 29.1599
>>>> Overall R-value for test set: 0.230219
>>>> Overall R-value for working set: 0.22014

 trying solvent model with fixed k_sol = 0.33 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.33  sol_b = 30.1529
>>>> Overall R-value for test set: 0.229631
>>>> Overall R-value for working set: 0.219609

 trying solvent model with fixed k_sol = 0.34 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.34  sol_b = 32.3753
>>>> Overall R-value for test set: 0.229198
>>>> Overall R-value for working set: 0.219109

 trying solvent model with fixed k_sol = 0.35 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.35  sol_b = 34.4658
>>>> Overall R-value for test set: 0.228898
>>>> Overall R-value for working set: 0.218689

 trying solvent model with fixed k_sol = 0.36 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.36  sol_b = 36.7022
>>>> Overall R-value for test set: 0.228842
>>>> Overall R-value for working set: 0.21837

 trying solvent model with fixed k_sol = 0.37 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.37  sol_b = 39.136
>>>> Overall R-value for test set: 0.228802
>>>> Overall R-value for working set: 0.218195

 trying solvent model with fixed k_sol = 0.38 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.38  sol_b = 40.9752
>>>> Overall R-value for test set: 0.228729
>>>> Overall R-value for working set: 0.218058

 trying solvent model with fixed k_sol = 0.4 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.4  sol_b = 44.2929
>>>> Overall R-value for test set: 0.22895
>>>> Overall R-value for working set: 0.217772

 trying solvent model with fixed k_sol = 0.42 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.42  sol_b = 48.4719
>>>> Overall R-value for test set: 0.229203
>>>> Overall R-value for working set: 0.217768

 trying solvent model with fixed k_sol = 0.45 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.45  sol_b = 54.9428
>>>> Overall R-value for test set: 0.229164
>>>> Overall R-value for working set: 0.21809

 trying solvent model with fixed k_sol = 0.5 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.5  sol_b = 73.3355
>>>> Overall R-value for test set: 0.230265
>>>> Overall R-value for working set: 0.219592

 trying solvent model with fixed k_sol = 0.6 , solrad = 1.0, shrink = 1.0, bscale option = "isotropic"
 refined solvent parameters: sol_k = 0.6  sol_b = 103.978
>>>> Overall R-value for test set: 0.236532
>>>> Overall R-value for working set: 0.22525

 now recomputing solvent model for best parameters
 best sol_k = 0.42
 best sol_b = 48.4719
 Note: isotropic scaling is now applied to Fcalc = -5.30598E-02

 using fixed solvent parameters: sol_k = 0.42  sol_b = 48.4719

 Solvent model and B-scaling completed
 Solvent model sol_k = 0.42
 Solvent model sol_b = 48.4719
 Solvent model solrad = 1
 Solvent model shrink = 1
 The isotropic component of B scaling ( -5.305464E-02 ) has been added to the B-factors of the atomic model

 CNSsolve> 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> xray 
 XRAY>   @@CNS_XTALMODULE:calculate_r ( 
 ASSFIL: file calculate_r opened.
 XRAY>! Module file: calculate_r 
 XRAY>! 
 XRAY>! CNS module 
 XRAY>! ************ 
 XRAY>! 
 XRAY>! Authors: Axel Brunger and Paul Adams 
 XRAY>! 
 XRAY>! copyright Yale University 
 XRAY>! 
 XRAY>! Function: 
 XRAY>!    Calculates crystallographic R-values 
 XRAY>! 
 XRAY>! Requirements: 
 XRAY>!    Needs to be called within xray 
 XRAY> 
 XRAY>module {calculate_r} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>&fobs=fobs; 
 MODULE-DECLARATION>&fcalc=fcalc; 
 MODULE-DECLARATION>&fpart=fpart; 
 MODULE-DECLARATION>&sel=all; 
 MODULE-DECLARATION>&sel_test=none; 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>&print=false;  ! if true, writes R value distributions as a function of resolution to the file specified by "&output" 
 MODULE-DECLARATION>               ! if false, only writes the overall R values to &output 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>&output=OUTPUT; 
 MODULE-DECLARATION>&r=$r; 
 MODULE-DECLARATION>&test_r=$test_r; 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>&calc_r_stats=false; !flag indicating to compute compound symbol that contains the R value distribution and completeness 
 MODULE-DECLARATION>&r_stats=$r_stats;   !compound symbol that contains R value distributions and completeness 
 MODULE-DECLARATION>!  r_stats.nbins           ! number of bins 
 MODULE-DECLARATION>!  r_stats.<i>.high        ! high resolution limit for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.low         ! low resolution limit for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.nref_work   ! number of reflections in working set for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.nref_free   ! number of reflections in test set for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.value_comp  ! completeness (work + test set) for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.value_work  ! working R value for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.value_free  ! free R value for bin <i> 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>) 
 MODULE-INVOCATION>                                 fobs=&STRIP%obs_f; 
 &_2_FOBS set to &STRIP%_1_OBS_F 
 MODULE-INVOCATION>                                 fcalc=fcalc; 
 &_2_FCALC set to fcalc 
 MODULE-INVOCATION>                                 fpart=fbulk; 
 &_2_FPART set to fbulk 
 MODULE-INVOCATION>                                 sel=( ref_active=1 ); 
 &_2_SEL set to ( ref_active = 1 ) 
 MODULE-INVOCATION>                                 sel_test=( tst_active=1 ); 
 &_2_SEL_TEST set to ( tst_active = 1 ) 
 MODULE-INVOCATION>                                 print=true; 
 &_2_PRINT set to true 
 MODULE-INVOCATION>                                 output=OUTPUT; 
 &_2_OUTPUT set to OUTPUT 
 MODULE-INVOCATION>                                 r=$start_r; 
 &_2_R set to $_1_START_R 
 MODULE-INVOCATION>                                 test_r=$start_test_r;) 
 &_2_TEST_R set to $_1_START_TEST_R 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 XRAY>  set echo=on message=normal end 
 XRAY>else 
 XRAY>  set echo=off message=off end 
============================================
     R-value by resolution for test set
============================================
 #bin | resolution range | #refl | 
    1   2.74   79.06        432      0.2034
    2   2.17    2.74        426      0.2102
    3   1.90    2.17        433      0.2245
    4   1.73    1.90        451      0.2143
    5   1.60    1.73        444      0.2697
    6   1.51    1.60        436      0.2585
    7   1.43    1.51        412      0.3161
    8   1.37    1.43        408      0.3931
>>>> Overall R-value for test set: 0.229203
============================================
    R-value by resolution for working set
============================================
 #bin | resolution range | #refl | 
    1   2.74   79.06       8351      0.1921
    2   2.17    2.74       8223      0.1893
    3   1.90    2.17       8135      0.2008
    4   1.73    1.90       8096      0.2133
    5   1.60    1.73       8016      0.2442
    6   1.51    1.60       7932      0.2847
    7   1.43    1.51       7867      0.3325
    8   1.37    1.43       7620      0.4110
>>>> Overall R-value for working set: 0.217768
 XRAY> end 
 CNSsolve> 
 CNSsolve> {- check the gridding again since the minimum B-factor may have changed -} 
 CNSsolve> show min ( b ) ( &atom_select ) 
 SELRPN:   3020 atoms have been selected out of   3020
 SHOW: minimum of selected elements =       5.946945
 CNSsolve> evaluate ($b_min=$result) 
 EVALUATE: symbol $B_MIN set to    5.94695     (real)
 CNSsolve> @@CNS_XTALMODULE:fft_parameter_check ( 
 ASSFIL: file fft_parameter_check opened.
 CNSsolve>! Module file: fft_parameter_check 
 CNSsolve>! 
 CNSsolve>! Function: determines the optimum setting for the B-factor inflation 
 CNSsolve>! given the high resolution limit, the gridding factor, and the minimum 
 CNSsolve>! B-factor of the model.   It also determines the recommended ELIM parameter 
 CNSsolve>! as a function of the high resolution limit. 
 CNSsolve>! 
 CNSsolve>! Reference: 
 CNSsolve>! 
 CNSsolve>! Gerard Bricogne (2001), 
 CNSsolve>!   International Tables for Crystallography, Volume B, 2001, p. 87 
 CNSsolve>! 
 CNSsolve>! CNS module 
 CNSsolve>! ********** 
 CNSsolve>! 
 CNSsolve>! Authors: Axel T. Brunger and Paul D. Adams 
 CNSsolve>! 
 CNSsolve>! copyright Yale University 
 CNSsolve>! 
 CNSsolve>! Requirements: 
 CNSsolve>! This module can only be used from the main level of CNS. 
 CNSsolve>! 
 CNSsolve>! 08/03/06 ATB 
 CNSsolve> 
 CNSsolve>module {fft_parameter_check} 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION> &b_min=0;              {input: minimum B-factor of model} 
 MODULE-DECLARATION> &d_min=1.0;            {input: high resolution limit} 
 MODULE-DECLARATION> &q_factor=100;         {input: quality factor - 100 for 1% accuracy} 
 MODULE-DECLARATION> &grid=auto;            {input: if "auto" gridding factor is set automatically} 
 MODULE-DECLARATION>                        {       otherwise gridding factor set to <number>  } 
 MODULE-DECLARATION> &fft_memory=-1;        {input: fft memory; if "-1" use automatic mode } 
 MODULE-DECLARATION> 
 MODULE-DECLARATION> &fft_grid=$fft_grid;   {output: fft gridding factor} 
 MODULE-DECLARATION> &fft_b_add=$fft_b_add; {output: fft B addition} 
 MODULE-DECLARATION> &fft_elim=$fft_elim;   {output: fft elimit factor} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>) 
 MODULE-INVOCATION>                             d_min=&high_res; 
 &_2_D_MIN set to &_1_HIGH_RES 
 MODULE-INVOCATION>                             b_min=$b_min; 
 &_2_B_MIN set to $_1_B_MIN 
 MODULE-INVOCATION>                             grid=auto; 
 &_2_GRID set to auto 
 MODULE-INVOCATION>                             fft_memory=&fft_memory; 
 &_2_FFT_MEMORY set to &_1_FFT_MEMORY 
 MODULE-INVOCATION>                             fft_grid=$fft_grid; 
 &_2_FFT_GRID set to $_1_FFT_GRID 
 MODULE-INVOCATION>                             fft_b_add=$fft_b_add; 
 &_2_FFT_B_ADD set to $_1_FFT_B_ADD 
 MODULE-INVOCATION>                             fft_elim=$fft_elim; 
 &_2_FFT_ELIM set to $_1_FFT_ELIM 
 MODULE-INVOCATION>                                      ) 
 CNSsolve> 
 CNSsolve> set message ? end 
 MESSage=NORM
 CNSsolve> evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 CNSsolve> set echo ? end 
 ECHO=TRUE {ON}
 CNSsolve> evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 CNSsolve> if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   set echo=on message=normal end 
 CNSsolve> else 
 CNSsolve>   set echo=off message=off end 
 fft_parameter_check: using automatic memory option
 fft_parameter_check: minimum model B-factor = 5.94695  A^2
 fft_parameter_check: high resolution limit = 1.37  A
 fft_parameter_check: fft gridding factor set to 0.3333
 fft_parameter_check: fft B factor offset set to 0  A^2
 fft_parameter_check: fft Elimit factor set to 10
 CNSsolve> 
 CNSsolve>{- END MODIFICATION -} 
 CNSsolve> 
 CNSsolve> if ( $harmonic = true ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>   do (refx=x) (all) 
 CNSsolve>   do (refy=y) (all) 
 CNSsolve>   do (refz=z) (all) 
 CNSsolve>   do (harm=0) (all) 
 CNSsolve>   do (harm=&k_harmonic) (&atom_harm) 
 CNSsolve>   flags include harm end 
 CNSsolve> end if 
 CNSsolve> 
 CNSsolve> 
 CNSsolve> evaluate ($cycle=1) 
 EVALUATE: symbol $CYCLE set to    1.00000     (real)
 CNSsolve> 
 CNSsolve> while ($cycle <= &num_cycles) loop main 
 NEXTCD: condition evaluated as true
 CNSsolve> 
 CNSsolve>   xray 
 XRAY>     @@CNS_XTALMODULE:refinementtarget (target=&reftarget; 
 ASSFIL: file refinementtarget opened.
 XRAY>! Module file: refinementtarget 
 XRAY>! 
 XRAY>! CNS module 
 XRAY>! ********** 
 XRAY>! 
 XRAY>! Authors: Axel Brunger and Paul Adams 
 XRAY>! 
 XRAY>! copyright Yale University 
 XRAY>! 
 XRAY>! Function: 
 XRAY>!    Defines the crystallographic refinement targets 
 XRAY>! 
 XRAY>! Requirements: 
 XRAY>!    Needs to be called within xray 
 XRAY> 
 XRAY>module {refinementtarget} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>  &target="residual";    {string} 
 MODULE-DECLARATION>  &sig_sigacv=0.07;      {real} 
 MODULE-DECLARATION>  &mbins=10;             {real} 
 MODULE-DECLARATION>  &fobs=fobs;            {reciprocal space array} 
 MODULE-DECLARATION>  &sigma=sigma;          {reciprocal space array} 
 MODULE-DECLARATION>  &weight=weight;        {reciprocal space array} 
 MODULE-DECLARATION>  &iobs=iobs;            {reciprocal space array} 
 MODULE-DECLARATION>  &sigi=sigi;            {reciprocal space array} 
 MODULE-DECLARATION>  &test=test;            {reciprocal space array} 
 MODULE-DECLARATION>  &fcalc=fcalc;          {reciprocal space array} 
 MODULE-DECLARATION>  &fpart=fpart;          {reciprocal space array} 
 MODULE-DECLARATION>  &pa=pa;                {reciprocal space array} 
 MODULE-DECLARATION>  &pb=pb;                {reciprocal space array} 
 MODULE-DECLARATION>  &pc=pc;                {reciprocal space array} 
 MODULE-DECLARATION>  &pd=pd;                {reciprocal space array} 
 MODULE-DECLARATION>  &phase=phase;          {reciprocal space array} 
 MODULE-DECLARATION>  &fom=fom;              {reciprocal space array} 
 MODULE-DECLARATION>  &sel=all;              {selection} 
 MODULE-DECLARATION>  &sel_test=none;        {selection} 
 MODULE-DECLARATION>  &statistics=false;     {logical} 
 MODULE-DECLARATION>) 
 &_2_TARGET set to &_1_REFTARGET 
 MODULE-INVOCATION>                                       sig_sigacv=0.07; 
 &_2_SIG_SIGACV set to 0.07 
 MODULE-INVOCATION>                                       mbins=&target_bins; 
 &_2_MBINS set to &_1_TARGET_BINS 
 MODULE-INVOCATION>                                       fobs=&STRIP%obs_f; 
 &_2_FOBS set to &STRIP%_1_OBS_F 
 MODULE-INVOCATION>                                       sigma=&STRIP%obs_sigf; 
 &_2_SIGMA set to &STRIP%_1_OBS_SIGF 
 MODULE-INVOCATION>                                       weight=$STRIP%obs_w; 
 &_2_WEIGHT set to $STRIP%_1_OBS_W 
 MODULE-INVOCATION>                                       iobs=$STRIP%obs_i; 
 &_2_IOBS set to $STRIP%_1_OBS_I 
 MODULE-INVOCATION>                                       sigi=$STRIP%obs_sigi; 
 &_2_SIGI set to $STRIP%_1_OBS_SIGI 
 MODULE-INVOCATION>                                       test=tst_active; 
 &_2_TEST set to tst_active 
 MODULE-INVOCATION>                                       fcalc=fcalc; 
 &_2_FCALC set to fcalc 
 MODULE-INVOCATION>                                       fpart=fbulk; 
 &_2_FPART set to fbulk 
 MODULE-INVOCATION>                                       pa=&STRIP%obs_pa; 
 &_2_PA set to &STRIP%_1_OBS_PA 
 MODULE-INVOCATION>                                       pb=&STRIP%obs_pb; 
 &_2_PB set to &STRIP%_1_OBS_PB 
 MODULE-INVOCATION>                                       pc=&STRIP%obs_pc; 
 &_2_PC set to &STRIP%_1_OBS_PC 
 MODULE-INVOCATION>                                       pd=&STRIP%obs_pd; 
 &_2_PD set to &STRIP%_1_OBS_PD 
 MODULE-INVOCATION>                                       phase=&STRIP%obs_phase; 
 &_2_PHASE set to &STRIP%_1_OBS_PHASE 
 MODULE-INVOCATION>                                       fom=&STRIP%obs_fom; 
 &_2_FOM set to &STRIP%_1_OBS_FOM 
 MODULE-INVOCATION>                                       sel=(ref_active=1); 
 &_2_SEL set to ( ref_active = 1 ) 
 MODULE-INVOCATION>                                       sel_test=(tst_active=1); 
 &_2_SEL_TEST set to ( tst_active = 1 ) 
 MODULE-INVOCATION>                                       statistics=true;) 
 &_2_STATISTICS set to true 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 XRAY>  set echo=on message=normal end 
 XRAY>else 
 XRAY>  set echo=off message=off end 
 XSIGMAACV: Overall sigma for line restraint is       0.07000000
 XSIGMAACV: step limit reached
 XSIGMAACV: Refinement of SIGMAA has finished 
            Overall mean FOM is   0.86068

 sigmaA statistics                   sigmaA   sigmaD     Delta     <Eobs^2>  <Ecalc^2>
 #bin | resolution range | #refl | 
    1   5.05   79.06       1429      0.9451  110.5132    0.5159    0.9983    0.9977
    2   4.01    5.05       1392      0.9583  126.9898    0.5589    0.9990    0.9987
    3   3.50    4.01       1419      0.9494  141.4785    0.5744    0.9997    0.9998
    4   3.18    3.50       1399      0.9442  109.2137    0.5726    0.9986    0.9983
    5   2.95    3.18       1391      0.9217  102.4764    0.5588    1.0000    1.0000
    6   2.78    2.95       1398      0.9647   70.2752    0.5888    0.9999    0.9999
    7   2.64    2.78       1382      0.9405   79.0530    0.5836    0.9998    0.9999
    8   2.52    2.64       1411      0.9547   63.8673    0.6155    0.9996    0.9992
    9   2.43    2.52       1399      0.9485   65.1781    0.5907    1.0000    1.0000
   10   2.34    2.43       1373      0.9439   73.1190    0.5961    0.9990    0.9991
   11   2.27    2.34       1366      0.9585   60.7547    0.6258    1.0000    1.0000
   12   2.20    2.27       1384      0.9530   60.1805    0.6433    0.9999    0.9998
   13   2.15    2.20       1371      0.9518   56.7053    0.6198    1.0000    1.0000
   14   2.09    2.15       1404      0.9405   52.0652    0.6247    0.9993    0.9991
   15   2.05    2.09       1362      0.9503   48.6002    0.5897    1.0000    1.0000
   16   2.00    2.05       1362      0.9466   53.1359    0.6300    0.9998    0.9996
   17   1.96    2.00       1361      0.9412   49.1289    0.6127    1.0000    1.0000
   18   1.93    1.96       1390      0.9544   40.1623    0.6537    1.0000    1.0000
   19   1.89    1.93       1365      0.9420   38.1424    0.5975    0.9999    0.9997
   20   1.86    1.89       1388      0.9501   35.6053    0.6118    1.0000    1.0000
   21   1.83    1.86       1334      0.9304   39.4363    0.5740    1.0000    1.0000
   22   1.80    1.83       1380      0.9356   36.8936    0.5483    0.9996    0.9996
   23   1.77    1.80       1368      0.9145   37.1117    0.5187    1.0000    1.0000
   24   1.75    1.77       1337      0.9343   33.7782    0.5617    1.0000    1.0000
   25   1.73    1.75       1382      0.9310   34.2287    0.5915    0.9995    0.9995
   26   1.70    1.73       1351      0.9235   31.1018    0.5222    1.0000    1.0000
   27   1.68    1.70       1343      0.8957   35.7031    0.5461    1.0000    1.0000
   28   1.66    1.68       1391      0.8822   33.9489    0.5386    1.0000    1.0000
   29   1.64    1.66       1321      0.8935   33.5499    0.5139    0.9989    0.9993
   30   1.62    1.64       1366      0.9086   28.2848    0.5106    1.0000    1.0000
   31   1.61    1.62       1375      0.8913   34.4507    0.5144    1.0000    1.0000
   32   1.59    1.61       1304      0.9107   31.2692    0.5441    1.0000    1.0000
   33   1.57    1.59       1346      0.9256   24.2100    0.5334    1.0000    1.0000
   34   1.56    1.57       1359      0.8955   26.5350    0.5152    1.0000    1.0000
   35   1.54    1.56       1317      0.8745   30.1940    0.4731    1.0000    1.0000
   36   1.53    1.54       1316      0.9008   25.3756    0.5045    1.0000    1.0000
   37   1.51    1.53       1346      0.9258   22.2876    0.4727    1.0000    1.0000
   38   1.50    1.51       1354      0.9159   21.9433    0.5192    1.0000    1.0000
   39   1.49    1.50       1320      0.8971   24.4682    0.5421    1.0000    1.0000
   40   1.48    1.49       1318      0.9036   21.8968    0.4764    1.0000    1.0000
   41   1.46    1.48       1321      0.8478   27.0376    0.4545    1.0000    1.0000
   42   1.45    1.46       1376      0.8859   24.3041    0.4596    1.0000    1.0000
   43   1.44    1.45       1258      0.8505   23.5583    0.4465    1.0000    1.0000
   44   1.43    1.44       1343      0.8142   23.2708    0.3651    1.0000    1.0000
   45   1.42    1.43       1305      0.8114   22.2781    0.3728    1.0000    1.0000
   46   1.41    1.42       1326      0.7850   22.3685    0.3970    1.0000    1.0000
   47   1.40    1.41       1286      0.8052   21.7190    0.3863    1.0000    1.0000
   48   1.39    1.40       1247      0.8445   19.5231    0.3571    1.0000    1.0000
   49   1.38    1.39       1313      0.8335   19.8519    0.4086    1.0000    1.0000
   50   1.37    1.38       1233      0.7863   21.4175    0.3816    1.0000    1.0000
 XRAY>   end 
 CNSsolve> 
 CNSsolve>   if ( &wa < 0 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>     @@CNS_XTALMODULE:getweight ( 
 CNSsolve>                                selected=&atom_select; 
 CNSsolve>                                fixed=(store9); 
 CNSsolve>                               ) 
 CNSsolve>   end if 
 CNSsolve> 
 CNSsolve>   if ( &minimize_nstep > 0 ) then 
 NEXTCD: condition evaluated as false
 CNSsolve>     minimize lbfgs 
 CNSsolve>       nstep=&minimize_nstep 
 CNSsolve>       nprint=5 
 CNSsolve>       drop=10.0 
 CNSsolve>     end 
 CNSsolve>   end if 
 CNSsolve> 
 CNSsolve>   evaluate ($cycle=$cycle+1) 
 EVALUATE: symbol $CYCLE set to    2.00000     (real)
 CNSsolve> 
 CNSsolve> end loop main 
 CNSsolve> while ($cycle <= &num_cycles) loop main 
 NEXTCD: condition evaluated as false
 CNSsolve> 
 CNSsolve>   xray 
 CNSsolve>     @@CNS_XTALMODULE:refinementtarget (target=&reftarget; 
 CNSsolve>                                       sig_sigacv=0.07; 
 CNSsolve>                                       mbins=&target_bins; 
 CNSsolve>                                       fobs=&STRIP%obs_f; 
 CNSsolve>                                       sigma=&STRIP%obs_sigf; 
 CNSsolve>                                       weight=$STRIP%obs_w; 
 CNSsolve>                                       iobs=$STRIP%obs_i; 
 CNSsolve>                                       sigi=$STRIP%obs_sigi; 
 CNSsolve>                                       test=tst_active; 
 CNSsolve>                                       fcalc=fcalc; 
 CNSsolve>                                       fpart=fbulk; 
 CNSsolve>                                       pa=&STRIP%obs_pa; 
 CNSsolve>                                       pb=&STRIP%obs_pb; 
 CNSsolve>                                       pc=&STRIP%obs_pc; 
 CNSsolve>                                       pd=&STRIP%obs_pd; 
 CNSsolve>                                       phase=&STRIP%obs_phase; 
 CNSsolve>                                       fom=&STRIP%obs_fom; 
 CNSsolve>                                       sel=(ref_active=1); 
 CNSsolve>                                       sel_test=(tst_active=1); 
 CNSsolve>                                       statistics=true;) 
 CNSsolve>   end 
 CNSsolve> 
 CNSsolve>   if ( &wa < 0 ) then 
 CNSsolve>     @@CNS_XTALMODULE:getweight ( 
 CNSsolve>                                selected=&atom_select; 
 CNSsolve>                                fixed=(store9); 
 CNSsolve>                               ) 
 CNSsolve>   end if 
 CNSsolve> 
 CNSsolve>   if ( &minimize_nstep > 0 ) then 
 CNSsolve>     minimize lbfgs 
 CNSsolve>       nstep=&minimize_nstep 
 CNSsolve>       nprint=5 
 CNSsolve>       drop=10.0 
 CNSsolve>     end 
 CNSsolve>   end if 
 CNSsolve> 
 CNSsolve>   evaluate ($cycle=$cycle+1) 
 CNSsolve> 
 CNSsolve> end loop main 
 CNSsolve> 
 CNSsolve> xray 
 XRAY>    predict 
 PREDict>      mode=reciprocal 
 PREDict>      to=fcalc 
 PREDict>      selection=(ref_active=1) 
 Total of     67682 structure factor elements were selected.
 PREDict>      atomselection=( &atom_select ) 
 SELRPN:   3020 atoms have been selected out of   3020
 PREDict>    end 
 FCALC: #scatt.=   3020 #anomalous=   0 #special pos.=  0 occupancies=1
 XFFT: using grid [ 125, 180, 180] and sublattice [ 125( 125), 180( 181),  60]
 XRAY>    @@CNS_XTALMODULE:calculate_r (fobs=&STRIP%obs_f; 
 ASSFIL: file calculate_r opened.
 XRAY>! Module file: calculate_r 
 XRAY>! 
 XRAY>! CNS module 
 XRAY>! ************ 
 XRAY>! 
 XRAY>! Authors: Axel Brunger and Paul Adams 
 XRAY>! 
 XRAY>! copyright Yale University 
 XRAY>! 
 XRAY>! Function: 
 XRAY>!    Calculates crystallographic R-values 
 XRAY>! 
 XRAY>! Requirements: 
 XRAY>!    Needs to be called within xray 
 XRAY> 
 XRAY>module {calculate_r} 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>( 
 MODULE-DECLARATION>&fobs=fobs; 
 MODULE-DECLARATION>&fcalc=fcalc; 
 MODULE-DECLARATION>&fpart=fpart; 
 MODULE-DECLARATION>&sel=all; 
 MODULE-DECLARATION>&sel_test=none; 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>&print=false;  ! if true, writes R value distributions as a function of resolution to the file specified by "&output" 
 MODULE-DECLARATION>               ! if false, only writes the overall R values to &output 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>&output=OUTPUT; 
 MODULE-DECLARATION>&r=$r; 
 MODULE-DECLARATION>&test_r=$test_r; 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>&calc_r_stats=false; !flag indicating to compute compound symbol that contains the R value distribution and completeness 
 MODULE-DECLARATION>&r_stats=$r_stats;   !compound symbol that contains R value distributions and completeness 
 MODULE-DECLARATION>!  r_stats.nbins           ! number of bins 
 MODULE-DECLARATION>!  r_stats.<i>.high        ! high resolution limit for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.low         ! low resolution limit for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.nref_work   ! number of reflections in working set for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.nref_free   ! number of reflections in test set for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.value_comp  ! completeness (work + test set) for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.value_work  ! working R value for bin <i> 
 MODULE-DECLARATION>!  r_stats.<i>.value_free  ! free R value for bin <i> 
 MODULE-DECLARATION> 
 MODULE-DECLARATION>) 
 &_2_FOBS set to &STRIP%_1_OBS_F 
 MODULE-INVOCATION>                                 fcalc=fcalc; 
 &_2_FCALC set to fcalc 
 MODULE-INVOCATION>                                 fpart=fbulk; 
 &_2_FPART set to fbulk 
 MODULE-INVOCATION>                                 sel=(ref_active=1); 
 &_2_SEL set to ( ref_active = 1 ) 
 MODULE-INVOCATION>                                 sel_test=(tst_active=1); 
 &_2_SEL_TEST set to ( tst_active = 1 ) 
 MODULE-INVOCATION>                                 print=true; 
 &_2_PRINT set to true 
 MODULE-INVOCATION>                                 output=OUTPUT; 
 &_2_OUTPUT set to OUTPUT 
 MODULE-INVOCATION>                                 r=$full_r; 
 &_2_R set to $_1_FULL_R 
 MODULE-INVOCATION>                                 test_r=$full_test_r;) 
 &_2_TEST_R set to $_1_FULL_TEST_R 
 XRAY> 
 XRAY>set message ? end 
 MESSage=NORM
 XRAY>evaluate ($message_old=$result) 
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 XRAY>set echo ? end 
 ECHO=TRUE {ON}
 XRAY>evaluate ($echo_old=$result) 
 EVALUATE: symbol $ECHO_OLD set to TRUE (logical)
 XRAY>if ( $log_level = verbose ) then 
 NEXTCD: condition evaluated as false
 XRAY>  set echo=on message=normal end 
 XRAY>else 
 XRAY>  set echo=off message=off end 
============================================
     R-value by resolution for test set
============================================
 #bin | resolution range | #refl | 
    1   5.05   79.06         88      0.2109
    2   4.01    5.05         64      0.1849
    3   3.50    4.01         78      0.1921
    4   3.18    3.50         77      0.2172
    5   2.95    3.18         53      0.2474
    6   2.78    2.95         59      0.1752
    7   2.64    2.78         72      0.2315
    8   2.52    2.64         73      0.2016
    9   2.43    2.52         60      0.2083
   10   2.34    2.43         76      0.2120
   11   2.27    2.34         64      0.1905
   12   2.20    2.27         72      0.2287
   13   2.15    2.20         51      0.1999
   14   2.09    2.15         65      0.2283
   15   2.05    2.09         69      0.2098
   16   2.00    2.05         89      0.2328
   17   1.96    2.00         69      0.2238
   18   1.93    1.96         73      0.2220
   19   1.89    1.93         64      0.2271
   20   1.86    1.89         75      0.1921
   21   1.83    1.86         63      0.2139
   22   1.80    1.83         98      0.2131
   23   1.77    1.80         70      0.2633
   24   1.75    1.77         59      0.2060
   25   1.73    1.75         61      0.2197
   26   1.70    1.73         62      0.2467
   27   1.68    1.70         71      0.2687
   28   1.66    1.68         77      0.2762
   29   1.64    1.66         64      0.2662
   30   1.62    1.64         80      0.2686
   31   1.61    1.62         79      0.2942
   32   1.59    1.61         64      0.2375
   33   1.57    1.59         81      0.2275
   34   1.56    1.57         67      0.2628
   35   1.54    1.56         70      0.3107
   36   1.53    1.54         64      0.2760
   37   1.51    1.53         66      0.2797
   38   1.50    1.51         69      0.2489
   39   1.49    1.50         62      0.2528
   40   1.48    1.49         69      0.2709
   41   1.46    1.48         70      0.3610
   42   1.45    1.46         70      0.2803
   43   1.44    1.45         61      0.3150
   44   1.43    1.44         61      0.4690
   45   1.42    1.43         77      0.4047
   46   1.41    1.42         69      0.3876
   47   1.40    1.41         61      0.4113
   48   1.39    1.40         59      0.4098
   49   1.38    1.39         67      0.3596
   50   1.37    1.38         60      0.3839
>>>> Overall R-value for test set: 0.229203
============================================
    R-value by resolution for working set
============================================
 #bin | resolution range | #refl | 
    1   5.05   79.06       1341      0.2337
    2   4.01    5.05       1328      0.1857
    3   3.50    4.01       1341      0.1756
    4   3.18    3.50       1322      0.1819
    5   2.95    3.18       1338      0.1966
    6   2.78    2.95       1339      0.1881
    7   2.64    2.78       1310      0.1795
    8   2.52    2.64       1338      0.1839
    9   2.43    2.52       1339      0.1825
   10   2.34    2.43       1297      0.1896
   11   2.27    2.34       1302      0.1928
   12   2.20    2.27       1312      0.2022
   13   2.15    2.20       1320      0.2024
   14   2.09    2.15       1339      0.1982
   15   2.05    2.09       1293      0.2003
   16   2.00    2.05       1273      0.1995
   17   1.96    2.00       1292      0.2074
   18   1.93    1.96       1317      0.1994
   19   1.89    1.93       1301      0.1996
   20   1.86    1.89       1313      0.2085
   21   1.83    1.86       1271      0.2035
   22   1.80    1.83       1282      0.2157
   23   1.77    1.80       1298      0.2157
   24   1.75    1.77       1278      0.2222
   25   1.73    1.75       1321      0.2214
   26   1.70    1.73       1289      0.2335
   27   1.68    1.70       1272      0.2411
   28   1.66    1.68       1314      0.2351
   29   1.64    1.66       1257      0.2457
   30   1.62    1.64       1286      0.2504
   31   1.61    1.62       1296      0.2629
   32   1.59    1.61       1240      0.2593
   33   1.57    1.59       1265      0.2700
   34   1.56    1.57       1292      0.2778
   35   1.54    1.56       1247      0.2920
   36   1.53    1.54       1252      0.2980
   37   1.51    1.53       1280      0.3005
   38   1.50    1.51       1285      0.2988
   39   1.49    1.50       1258      0.3167
   40   1.48    1.49       1249      0.3232
   41   1.46    1.48       1251      0.3181
   42   1.45    1.46       1306      0.3316
   43   1.44    1.45       1197      0.3583
   44   1.43    1.44       1282      0.3808
   45   1.42    1.43       1228      0.3928
   46   1.41    1.42       1257      0.3977
   47   1.40    1.41       1225      0.4047
   48   1.39    1.40       1188      0.4315
   49   1.38    1.39       1246      0.4388
   50   1.37    1.38       1173      0.4158
>>>> Overall R-value for working set: 0.217768
 XRAY> end 
 CNSsolve> 
 CNSsolve>{GAUCNS Set flags} 
 CNSsolve>set echo=off message=off end 
 EFLAGS: the following energy flags are set
 EFLAGS: XREF
 XTAREXPR: ->[TEST SET]    monitor=  0.229
 XTAREXPR: ->[WORKING SET] monitor=  0.218
 --------------- cycle=     1 --------------------------------------------------
 | Etotal =78769.402  grad(E)=7.622      E(XREF)=78769.402                     |
 -------------------------------------------------------------------------------
 (atom-i        |atom-j        )    dist.   equil.   delta    energy   const. 

 Number of violations greater   20.000:     0
 RMS deviation=   0.023
 EVALUATE: symbol $RMSD_BOND set to   0.233560E-01 (real)
 (atom-i        |atom-j        |atom-k        )  angle    equil.     delta    energy  const. 

 Number of violations greater   50.000:     0
 RMS deviation=   1.942
 EVALUATE: symbol $RMSD_ANGLE set to    1.94190     (real)
 ASSFIL: file minimize.pdb opened.
 NEXTCD: condition evaluated as true
 WA= 0.33074    
 EVALUATE: symbol $WA_PRINT set to   0.330740     (real)
 EVALUATE: symbol $COUNTER set to    1.00000     (real)
 EVALUATE: symbol $DONE set to FALSE (logical)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    2.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    3.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    4.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    5.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    6.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    7.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    8.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    9.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $DONE set to TRUE (logical)
 EVALUATE: symbol $COUNTER set to    10.0000     (real)
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    1.00000     (real)
 EVALUATE: symbol $DONE set to FALSE (logical)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    2.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    3.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    4.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    5.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $DONE set to TRUE (logical)
 EVALUATE: symbol $COUNTER set to    6.00000     (real)
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 ANOMalous=FALSe {OFF}
 NEXTCD: condition evaluated as false
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN:   3020 atoms have been selected out of   3020
 ASSFIL: file write_pdb opened.
 &_2_PDB_O_FORMAT set to true 
 &_2_COORDINATE_OUTFILE set to &_1_COORDINATE_OUTFILE 
 &_2_SGPARAM set to $_1_SGPARAM 
 NEXTCD: condition evaluated as true
 ASSFIL: file pdbgetsgname opened.
 &_3_SG set to &_2_SGPARAM.SG_NUMBER 
 &_3_SGNAME set to $_2_SG_PDB 
 MESSage=NORM
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 ECHO=FALSe {OFF}
 EVALUATE: symbol $ECHO_OLD set to FALSE (logical)
 NEXTCD: condition evaluated as false
 DISPlay-file=minimize.pdb
 EVALUATE: symbol $CURR_DISPLAY set to "minimize.pdb" (string)
 SELRPN:   3020 atoms have been selected out of   3020
 VCLOSE: Display file reset to OUTPUT.
 ASSFIL: file minimize.pdb1 opened.
 NEXTCD: condition evaluated as true
 WA= 0.33074    
 EVALUATE: symbol $WA_PRINT set to   0.330740     (real)
 EVALUATE: symbol $COUNTER set to    1.00000     (real)
 EVALUATE: symbol $DONE set to FALSE (logical)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    2.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    3.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    4.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    5.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    6.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    7.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    8.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    9.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $DONE set to TRUE (logical)
 EVALUATE: symbol $COUNTER set to    10.0000     (real)
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    1.00000     (real)
 EVALUATE: symbol $DONE set to FALSE (logical)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 EVALUATE: symbol $COUNTER set to    2.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    3.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    4.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $COUNTER set to    5.00000     (real)
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 EVALUATE: symbol $DONE set to TRUE (logical)
 EVALUATE: symbol $COUNTER set to    6.00000     (real)
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as false
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as true
 NEXTCD: condition evaluated as false
 ANOMalous=FALSe {OFF}
 NEXTCD: condition evaluated as false
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN:   3020 atoms have been selected out of   3020
 SELRPN:   3020 atoms have been selected out of   3020
 ASSFIL: file write_pdb opened.
 &_2_PDB_O_FORMAT set to true 
 &_2_COORDINATE_OUTFILE set to minimize.pdb1 
 &_2_SGPARAM set to $_1_SGPARAM 
 NEXTCD: condition evaluated as true
 ASSFIL: file pdbgetsgname opened.
 &_3_SG set to &_2_SGPARAM.SG_NUMBER 
 &_3_SGNAME set to $_2_SG_PDB 
 MESSage=NORM
 EVALUATE: symbol $MESSAGE_OLD set to "NORM" (string)
 ECHO=FALSe {OFF}
 EVALUATE: symbol $ECHO_OLD set to FALSE (logical)
 NEXTCD: condition evaluated as false
 DISPlay-file=minimize.pdb1
 EVALUATE: symbol $CURR_DISPLAY set to "minimize.pdb1" (string)
 SELRPN:   3020 atoms have been selected out of   3020
 VCLOSE: Display file reset to OUTPUT.
          ============================================================
           Maximum dynamic memory allocation:    60958840 bytes
           Maximum dynamic memory overhead:          1024 bytes
           Program started at: 23:43:56 on 24-Dec-2023
           Program stopped at: 23:44:04 on 24-Dec-2023
           CPU time used:       8.1521 seconds
          ============================================================
